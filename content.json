{"meta":{"title":"must english","subtitle":"一个菜鸟Pythonista的博客","description":"写一些Python和无关Python的文章","author":"Bruce","url":"http://blog.0x01.site"},"pages":[],"posts":[{"title":"关于十三邀的随记","slug":"关于十三邀的随记","date":"2021-04-16T15:44:37.000Z","updated":"2021-04-16T16:37:59.833Z","comments":true,"path":"2021/04/16/关于十三邀的随记/","link":"","permalink":"http://blog.0x01.site/2021/04/16/%E5%85%B3%E4%BA%8E%E5%8D%81%E4%B8%89%E9%82%80%E7%9A%84%E9%9A%8F%E8%AE%B0/","excerpt":"今晚看了几期十三邀，简单的记录一下自己的感想。","text":"今晚看了几期十三邀，简单的记录一下自己的感想。 因为 采访赖声川的预告，对赖声川的采访很有兴趣。这个预告片给我的震撼是，表演的感染力真的强，我很容易就被带入进去了。 赖声川赖声川很温柔，语速不快不慢，娓娓道来。喜欢漫威，瞧不上DC。夫人好有气质。夫人在描述他时，说因为父亲早逝，一直都很珍惜生命，非常拼命。但是2020年，他突然说，觉得这样就够了，或者停下来，也是可以的。 说的我也鼻子一酸。 我妈这两天刚好来深圳看腿，膝盖老化，会疼，医生说走路开始变形。我哥比较粗暴一点，不能再让妈妈做工了。但是我怎么忍心跟妈妈说，这辈子就这样了，歇歇吧。你怎么舍得劝说她放弃自己的生活，成为别人的附属呢？ 马东马东的采访之前看过，当我想要看点别的，第一个想到的就是马东。马东整体都让人很舒服，许知远来的时候，在楼下等他；许知远在跟别人聊的时候，给他倒杯酒。马东有点像张一鸣，他喜欢自己的产品，但是不是自己产品的用户。就是那种顶级的聪明人，为普通人设计东西。 许知远在说中国没有人文主义的积累，大家很有钱却不开心之类的话题的时候，马东立刻说，你在美国也不开心，你也会批评美国，觉得中国哪里好。你本质就是个批评家。 马东很快就意识到许知远会因为这句话被骂，立刻解释了许知远的意识，让镜头前的我们消除这种误解。 不过，这个时代，确实玻璃心太严重了。只要说点外国好，就是精日，美分。 罗振宇罗振宇是最真实的一个。马东虽然也真实，但是不会表达一些令人抵触的内容。罗振宇就比较敢说，说自己得罪了领导，说我传播知识，那些人走错路，是他们的理解力的问题。 罗振宇有个表达很好，这个时代，人与人的差距，本质上就是理解力的不同 李诞我跟李诞的很多行为都蛮像的，觉得别人说的越来越尴尬，我会去接个梗，把话题转走。许知远觉得这样会让话题终结，李诞觉得他在保护许知远和自己。 李诞把真心话混在笑话中。我已经很难认真的讲心里话了，会被别人笑话。但是又憋不住，于是也就混在笑话中。 其他看了公司内部的博客，发现并不是非得长篇才要写，短片，随想，该写就写。以后尽量多写吧。","raw":null,"content":null,"categories":[],"tags":[{"name":"随记","slug":"随记","permalink":"http://blog.0x01.site/tags/%E9%9A%8F%E8%AE%B0/"}]},{"title":"2020年总结","slug":"2020年总结","date":"2021-01-05T13:25:52.000Z","updated":"2021-04-16T14:48:39.043Z","comments":true,"path":"2021/01/05/2020年总结/","link":"","permalink":"http://blog.0x01.site/2021/01/05/2020%E5%B9%B4%E6%80%BB%E7%BB%93/","excerpt":"今年还不错。","text":"今年还不错。 元旦去了趟云南，在大理洱海边上抽烟，就在酝酿这篇总结了。 今年过的好快，年初的疫情爆发，我放心不下家里的小宝贝们，赶紧从家里冲了回来。开始的时候紧张兮兮，每当出门回来，必然洗全身。到处搜罗口罩，去高档超市买菜，自己学着做饭，几天都不出门。找外国朋友代购的口罩，也非常小心的寄给大家。 那段日子比较无聊，开始刷抖音上的各种电视剧，自己还捎带着倍速看了几部老片。 去年的目标，依然是一件都没有完成。 得但是今年的意外收获蛮多，是我工作以来，最丰收的一年。 年初的时候，虽然有朋友借钱让我出了一些股票出去，但是大头依然留在股市。经过两年来的经验，学会了耐心持有，在今年终于迎来爆发，重仓持有的Sea和特斯拉都迎来了大幅上涨，并且让我萌生了买房的想法。(当然如果持有到现在，我的收益更高。 今年深圳房价大涨，几个互联网巨头的股票也在上涨。今年互联网巨头们做的比去年好很多吗？白酒厂们今年增加了产量了吗？我得出一个结论，今年在严重的放水，而且上半年是肉眼可见的通货膨胀。 我开始劝身边的人重仓白酒基金或者持有资产，把钱扔出去。自己则是在筹备买房。我最中意的是宝安中心附近的二手房。买了房子我大概率不会去住(我喜欢离公司近的房子)，买了房子大概率也是租出去，所以二手房最佳，还可以用租金度过资金紧张的前期。去看了一次西乡的房子，我把目标放在400万的小两房，结果中介推荐了港隆城，差到不能忍，当场提高预算到500万。1号线和11号线附近的房子全部排除掉的前提下，看到的房子也都各有利弊，要么没有电梯+车位非常紧张，要么就是桃源村那种，巨大无比的小区，走出小区都要20分钟。看了二手房以后，大受打击，自己就在想，要么选一个南山的一房，租售比最高，也有涨价的空间。 不过我很早的加入了打新的队伍，在经历了华强城市花园的试水失败之后，便开始了周末看房之旅。下半年的每个周末，我几乎都会拿出一天来看房，遇到合适的，自己的钱够认筹的情况下，就会出手认筹。 我把股票全部抛了之后，股市依然在上涨，自己也借了一部分钱在手里，并且承诺了6%的年收益，二手房虽然受制于715新政交易量不高，但是我觉得越往后房票肯定越多，而且代持的事情也是听说的越来越多，双重压力下，我暗自下决心，今年一定要搞定房子的事情。 念念不忘必有回响。在进入12月份的第一次摇号，摇中了佳兆业。于是顺利上车。 今年国庆假期，去了西北自驾游，玩的很爽，也收获了女朋友一枚。 年底面试也异常的顺利，腾讯的面试到了GM面挂掉了，转身投了字节，顺利收到offer。 失今年工作上非常不顺利。年初因为入库重构上线的问题太多，加上member投诉了manager，导致了矛盾集中爆发。虽然自己因为不满公司的管理制度，早就想辞去leader，但是真正离开已经做了2年的WMS的时候，还是有些许不甘。自己付出了那么多，自以为是在带领项目走向更好，但是领导并不认可。 下半年也相继换了几个项目，熟悉了之后被调走，也是难受的很。 总之，工作上是极其失败的一年 今年依然在持续发胖，开始影响到身体了。新的一年，工作压力也变大了，无论如何都要注意下自己的身体 展望定下的目标貌似都没啥用，新的一年还是要定下些目标 希望自己能用好一个工具， 技术上有所进步，继续成为一个有竞争力的人 还完债","raw":null,"content":null,"categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://blog.0x01.site/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"好好保护身体","slug":"好好保护身体","date":"2020-05-09T12:10:48.000Z","updated":"2021-04-16T14:48:39.045Z","comments":true,"path":"2020/05/09/好好保护身体/","link":"","permalink":"http://blog.0x01.site/2020/05/09/%E5%A5%BD%E5%A5%BD%E4%BF%9D%E6%8A%A4%E8%BA%AB%E4%BD%93/","excerpt":"4月末的时候，突然生病了，确诊了面瘫。","text":"4月末的时候，突然生病了，确诊了面瘫。 最近的需求稍微紧了一点，业务方提了两个紧急需求。我组里能做这两个需求的只有三个人(包括我在内)，其中一人我领导特别不信任，于是就只能亲自做了。 在虾皮当leader，最烦的就是平时的杂务很多。比如领导定期要个东西，比如要确保每个事情的进度。本来进度这东西吧，我清楚没有延期风险即可。但是领导又要求各种明确的进度说明之类的。另外平时的各种问题的查看，也占据了不少时间。还有各种会。对了，我还带了个新人。 自从不当leader之后，再加上我身上也没有需求，突然变的好轻松。我又有点后悔当初没有记录下当时自己工作时间占比了。 接着讲我接了这个需求之后的事情。我接的需求一般都是天数较短，比较容易，且不紧急的需求。这样我不怕打断，也不怕突发事件插入。 但是现在这个需求虽然不难，但是相对来说是个整块的需求，而且比较紧急。我前几天几乎一笔没动，后来进度跟不上了，于是就白天做事，晚上写代码。 而且我是个相对来说慢热的人，坐下来还要休息(比如刷刷抖音之类的)，想一会才会真的写代码。到家基本快九点，休息一下基本到了10点，就一直写到了12点，偶尔会写到1点钟。这个需求提测后，QA那边会有些疑似bug的问题提出，偶尔没时间看，也是晚上去看的。 不过这种节奏我之前经历过几次，这次也没啥特别的，所以仅仅如此还压不倒我。 这个需求的末期，我们系统突然出现了线上问题。特征是celery的进程会一直增多，然后让服务器内存爆掉。我们一直没有找到原因，但是每隔6个小时左右，内存会涨到顶，需要有人起来重启服务。嗯，这个人就是我。一般是晚上一点一次，早晨6点半一次。 后来我领导忍无可忍，拉着我们一起看问题，有一天看到了凌晨4点。那天是周五，我周六还要加班写需求。然后我身体就崩了。 其实面瘫应该是在这一晚之前就感染上了，只是不严重。但是身体确实长期劳累了，自己却没有察觉到。 可以分享下自己的病例。面瘫开始的时候，只是感觉自己右半边脸不得劲，吃饭的时候，感觉有点怪怪的。我周六的时候吃饭的时候感觉自己不太自然，周天的时候发现自己的嘴有点歪。但是我以为是脸抽筋了，没太当回事。周一有新人的entry task评审，我不想推后这件事，于是约了周二去看医生。 周一早晨的时候我漱口发现右半边嘴角兜不住了，来了公司找人看了下我的眼睛，发现明显的一大一小。于是推了所有的事情，去了医院。 我一向反对大小病都去大医院的做法，我觉得那样会让三甲医院挤满了人，想着这是个成熟治愈的病，就去了三等医院——蛇口人民医院。 去了之后都是些常规的检查，血常规，CT(查看脑部是否感染)。我还去看了眼科，因为眼睛十分不舒服。开了一堆药，回家吃药，观察结果。 面瘫这个病的恢复期特别长，一般是1-2个月，吃药不见好转，因为正处于恶化的时期。同事说自己妈妈也面瘫，说针灸好了。去网上一查，大家也说针灸对面瘫恢复有帮助。 去中医院比较麻烦的就是得每天去，而且最好是早早去，要不还要抢床位，另外不早早去，还要请病假，觉得太辛苦了。但是同事们都这么说，还是鼓足了劲去中医院。 我几乎每天早晨7点起床，7点半出发，8点多到停车场，走到中医院8点半多，针灸1小时，9点半再开车去上班，到了公司基本就10点半了。之前找的停车位离医院有点远，后来找到了一个稍微近一点的，也就改善了大约20分钟的样子。 这种生活一直持续至今，针灸的频率改成了两天一次，目前除了笑起来嘴是歪的，其他时候基本看不出来了。 一点插曲说到去蛇口医院看面瘫，做了CT(感觉有一点点过度医疗的嫌疑)，医生在看我的CT报告的时候，发现我的脑中间有个白色的阴影，疑似是个脑前叉交通动脉瘤。给了神经外科的医生看了，他说是CT没有拍清楚，要确诊得做核磁共振。于是去了南山医院，医生接过来这份报告，说概率很小，还是做个核磁共振确认下吧。 其实只要有一个医生提出了，别的医生没有证据前是不敢否认的，因为万一是，自己就倒大霉了。于是自己就去做了核磁共振。 排队核磁共振需要两周，在这期间，虽然自己很有信心身体没问题，但是，万一有问题呢？ 我不怎么存钱，身上有车贷，没有房贷。身上的负债并不多，但是自己却是唯一的收入来源。爸妈并没有什么钱，治病的钱暂且可以从医保和其他保险里拿，但是生活要怎么维持下去？而且爸妈还没从我这里得到什么收益呢，万一以后不能顺利挣钱了，难道爸妈养得起我？ 还捎带着反思了下自己的人生，如果去掉了工作，我活着的意义又在哪里，又有多少人记得我曾经活过呢。 留在最后首先给自己买了重疾险，不至于生了大病的情况下，生活无法维持下去 另外就是好好的关心下自己的身体，知道身体的极限在哪里。特别是自己的年纪稍微大了点，再加上疫情期间疏于锻炼，身体的情况是直线下降的。 释放压力，多健身，好好注意自己的身体。","raw":null,"content":null,"categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://blog.0x01.site/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"2019总结","slug":"2019总结","date":"2020-02-23T12:02:29.000Z","updated":"2021-04-16T14:48:39.043Z","comments":true,"path":"2020/02/23/2019总结/","link":"","permalink":"http://blog.0x01.site/2020/02/23/2019%E6%80%BB%E7%BB%93/","excerpt":"Same as 2018.","text":"Same as 2018. 先来看看2018年的几个目标 投资2018年的投资经历很失败，2019年多了些耐心，但是依然错过了我司和特斯拉的大涨。 我司在一夜之内，从13块涨到22块，我大约在28块上车，目前已经50+。 特斯拉大约在300左右上车，在450左右下车，目前已经800+。 总结起来是赚钱了，自己还算满意。不知道本金多一点的时候，自己是不是还能保持。 有个同事靠炒股赚了50万，我大概只赚了4-5万港币，本金还是太少，另外眼光也确实欠缺。 2018目标 多读书，把之前标注想读的书都读了 19年大概读了12本书，都是小说，也绝大部分都是上半年读的。自己去图书馆读书的计划也搁置了 教高老师学Python 只上了一课，直接放弃了。高老师也离职了，应该永远都没戏了。 认真的学习一门新语言 失败。学了一丢丢的ruby，不成气候 做一个小程序，并且发布 失败。倒是跟刀爷学了一丢丢的React Native做了iOS的App，给别人做外包，无奈App太简单，发布太难。放弃 啃完MySQL那本大厚书 全靠阿姨每两周的打扫，才不至于积灰吧 买辆二手车 花钱的事情倒是超额完成。大概6月份的时候，深圳突然放出一些车牌拍卖，我出价2.6万买到。在买车的时候，犹豫再三，还是决定一步到位买了一辆雅阁。背上负债还是很痛苦的。 如果再来一次，你还会选这辆车吗？ 本来打算买辆二手车，但是自己实在没有辨别的能力。雅阁汽油版有失速门的问题，所以，可能会加钱选混动版吧😃 买了车之后带来的改变有哪些？ 首先车技好了。之前在家里开车，但是并不熟。买了车之后立刻就撞了两次，一次是提车回来的时候，从辅路并主路，右轮直接撞马路牙子上，车胎直接爆了。发生意外的主要原因是，自己得意忘形，加上没开过这么宽的车。第二次则是过一个红绿灯，车辆缓行，于是没发现这个因为修路，这个路口有两个红绿灯，路中间是个等待区。 其次就是出行范围确实广了。自己也乐意开车出去，去大运看足球赛，看王者荣耀决赛，去广州吃吃吃。加上公司恰好有个180一个月的车位，也就一直开车上下班。临近年末，9号线延长线开通，我去公司只有地铁两站的距离，车就被搁置了。 本来会是个悲伤的故事，没想到2020年初的肺炎来了个大反转。在老家就能感受到，没有自己的车，真的寸步难行，遇上了肺炎时期，体会就更加深刻。我爷爷去世，在客车停运的情况下，我哥几个小时后就赶到了。我出发去机场，虽然最终是打了个快车，但是如果快车也停运的话，我也有办法，有了车之后，你就永远会有个自己的选项。到达深圳之后，出去买买买，去公司搬东西，上班，都是开车，幸福感满满。 总体来说，背上了负债，但是因为我不是刚需，所以得到的并不如想象中的那么多。 2020目标2019年是浑浑噩噩的一年，自己当了leader之后，生活上的节奏逐渐失控。自己下半年简直是忙到吐，回到家要么是刷抖音看剧，要么就是躺着什么都不干。 2020年的首要目标就是找回自己的节奏，找回自己的身体 减肥。至少把脂肪肝从中度降到轻度吧，肚子能消掉，以前的裤子能穿进去。 戒烟。脂肪肝跟抽烟有关系，减少抽烟，直到完全不抽为止 做一个应用。我脑中一直在构思一个向死而生的App，想办法做出来，并且试着推广一番。也希望自己能够有钱，一直维持下去。 找回自己每周都去图书馆的节奏，哪怕去读小说也很赞 另外希望自己的技术和管理才能有点进步吧，毕竟感觉自己原地踏步好久了。","raw":null,"content":null,"categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://blog.0x01.site/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"重温武侠剧","slug":"重温武侠剧","date":"2020-02-22T15:16:32.000Z","updated":"2021-04-16T14:48:39.048Z","comments":true,"path":"2020/02/22/重温武侠剧/","link":"","permalink":"http://blog.0x01.site/2020/02/22/%E9%87%8D%E6%B8%A9%E6%AD%A6%E4%BE%A0%E5%89%A7/","excerpt":"最近几年确实越来越懒，到了19年的下半年，更是失去了努力的意志。晚上回来刷剧，躺着刷抖音，毫无学习的习惯。\n过年的时候，又遇上肺炎，刷完了《精英律师》、《想见你》之外，我又重温了几部金庸的武侠剧。","text":"最近几年确实越来越懒，到了19年的下半年，更是失去了努力的意志。晚上回来刷剧，躺着刷抖音，毫无学习的习惯。 过年的时候，又遇上肺炎，刷完了《精英律师》、《想见你》之外，我又重温了几部金庸的武侠剧。 神殿侠侣最喜欢的就是古天乐、李若彤那版了。过年刷抖音，刷到杨过和无双，竟然毫无印象。 于是开始刷剧。 再看的时候，姑姑也没有那么漂亮，但是好喜欢无双和程英。小的时候懵懵懂懂，只是喜欢看人打斗。现在在看，更多的是看感情纠结。 郭靖看到杨过的时候，抑制不住内心的激动。杨过看到自己曾经抚养过郭襄，倒是波澜不惊。我一直很喜欢重逢的情节，杨过16年后再遇小龙女，《火影忍者》里，卡卡西见到自己老师的儿子，还在妈妈肚子里的时候就在守护的鸣人，是一种什么的情绪？自来也在一乐拉面跟一鸣一起吃拉面，面对这个名字都是自己取的鸣人，眼前会不会闪过好多画面？ 小的时候特别讨厌神雕侠侣的黄蓉，现在再看，除了教育女儿不力，其他的其实还是射雕英雄传的延续。继续含情脉脉的看着郭靖，也继续古灵精怪，足智多谋。虽然稍微多疑，其实也是他的性格。 杨过跟姑姑在一起，略显沉闷，跟无双和程英在一起，才是自己的年少时光 笑傲江湖我最喜欢的就是李亚鹏和许晴的那版。许晴大妈真的是美啊，不过剧里发型大部分时候都不堪入目。 圣姑是这几部中我最喜欢的女主，敢爱敢恨，不扭捏。令狐冲稍微有点扭捏的时候，圣姑总是会主动扑上来。在令狐冲一次一次伤圣姑的心的时候，圣姑并没有生气不见他，只要有机会就会扑向他，心里并不曾有一丝一毫的犹疑。我最喜欢的就是圣姑假扮老婆婆的时候，许晴还有点调皮，真的好可爱 令狐冲也是一位敢爱敢恨的侠士，不贪武功，广交好友，潇洒的很。 令狐冲治病的情节也是有意思的很，大家都想救令狐冲，却一步步把事情弄的更加复杂。 令狐冲的性格比较直率，也比较冲动。对师妹的感情自然深厚，常常出了事，却不曾顾及身边的盈盈，也是有点让人生气。 连城诀连城诀隔了这么久，也没用重拍，是因为太惨了吧。 大家看武侠剧，还是喜欢爽一点。虽然主角略有波折，但是整体向上，到了后期也是名利双收，功夫无敌的存在。狄云虽然也是一步步功夫无敌，但是在生活中，却是一步步的失去，被称为最惨的男主。 这个剧不想看，一直在抖音上追。。 鹿鼎记金庸写了那么多书之后，封笔之作竟然是一部爽剧。小宝与其他主角一点都不同，不努力，油嘴滑舌，还非常花心。要知道之前的书里，主角都很痴情。 这部其实称不上武侠剧，因为功夫已经被淡化的很厉害了。小宝去少林寺当和尚，把七十二绝技，易筋经放在眼前，已经无心再练了，因为太辛苦了。 拿到了匕首和金蝉衣，带着一张嘴就去闯江湖了。 每次被武力相逼，只能乖乖就范。每次遇到险境，总能化解，而且听了还挺有道理的，真是佩服金庸先生的才华。 看的当然是陈小春版的，张卫健版的多少太TVB风了。(虽然陈小春的也是TVB出的) 绝代双骄凌志颖苏有朋版版，张卫健谢霆锋版的都看过，印象中差不多。最近在抖音上追张卫健版的，感觉这版\b的小鱼儿特别惨。 看到小仙女离世，苏樱殒命，还是忍不住眼泪直流。 其他杨过给陆无双接骨，脱了衣服看了半天，闭着眼睛去摸，无双说道：你干什么？肋骨在下面啊！这个场景想想就好搞笑，金庸先生还真是色眯眯的。 看完《鹿鼎记》就退了，还是得好好努力学习才是。","raw":null,"content":null,"categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://blog.0x01.site/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"关于葬礼","slug":"关于葬礼","date":"2020-02-18T15:05:00.000Z","updated":"2021-04-16T14:48:39.045Z","comments":true,"path":"2020/02/18/关于葬礼/","link":"","permalink":"http://blog.0x01.site/2020/02/18/%E5%85%B3%E4%BA%8E%E8%91%AC%E7%A4%BC/","excerpt":"今年大年初四，我爷爷去世了。","text":"今年大年初四，我爷爷去世了。 姥姥在我妈小的时候就去世了，奶奶，外公也都在我大学的时候去世，爷爷是家里唯一的老人，也就这么没了。从此之后爸妈就是家里年纪最大的人了 今年过年的时候，是武汉肺炎肆虐的时刻。年前我爷爷因为肺心症，年前在医院住院，考虑到肺炎，大家把爷爷接回来了家。村里即使反应慢，也是初二就封了村子。几条主路用泥土挡上，还派人看守，不让出入。因此就断了治疗。 本来看起来一切正常，但是初四的中午突然开始不舒服，然后迅速的就走了。 我貌似是个冷血动物，我跟爷爷奶奶都不亲，所以并不感觉悲伤。爸妈也差不多，忙于执行葬礼的手续，爸爸一边抹眼泪，一边语气平和的通知亲戚。我们四个孙子守灵的时候，还玩了几把王者荣耀。 爷爷生了2个女儿，2个儿子。大姑生了二女一男，男孩子比较宠溺，大姑被气到生病去世。小姑因为信仰某种禁忌，自杀身亡。我爸和伯父，各生了两个儿子，父慈子孝，说得上是幸福的家庭。 葬礼上，我爸和伯父哭丧，身边各有两个儿子扶着，让人感觉家大业大，也让我萌生了，应该多生几个孩子的想法。。 我仔细观察了葬礼的习俗并凭借记忆记录下来。如果能多给我时间，去寻根问底的话，说不定可以写点乡村葬礼习俗出来。 葬礼前人去世了以后，找两根凳子，一张木板，把人放上去，然后锦缎盖住，放到正屋。然后摆上香炉蜡烛，就是灵堂了。现在火葬了，没有棺材，也不是大户人家，所以也不把灵堂收拾的太好。 一般每个村，甚至是每个姓氏都会有个懂葬礼规矩，能主持葬礼的人。我爸立刻通知了他，开始做前期的准备。也通知了四个力士(具体的名字我记不清了，暂时这么称谓)过来帮忙，之前应该算是抬棺材的，现在主要是放鞭炮，搬东西之类的。 堂哥立刻去买了一箱鞭炮。 我妈和伯母则四处借白麻衣。未染色的白麻，非常粗糙，也非常薄，一撕就破，大家简单的缝几针，就做成了白麻衣。守孝期间穿白麻衣，代表着痛失长辈，无心享受生活之意。大家做的时候就简单的缝几针，麻衣烂了代表着福气。白麻衣的规矩还是比较讲究的，父母俱在是不能拥有白麻衣的，所以我和几个哥哥和嫂子的白麻衣都要去借，且不能主动还，需要别人上门来取，否则有送祸之意。每个人都要做个帽子，男人的有点像针织帽，女人的像个斗笠。如果是亲生儿子，前面还要有个布条遮挡。父母不在的，帽子用麻绳捆绑，父母还在的，帽子用红绳捆绑。我爸和伯父的鞋子也要用白麻布条缠住，腰带也是麻绳做的。父母都不在的，会把白麻衣压在衣柜底下，把福气留在家里。 未结婚的要用红腰带，所以我在人群里显得特别扎眼。 在送葬之前，要守夜。我爸和伯父都比较有担当，本来孙子也是可以守夜的，但是我们四个也就替换了他们去吃饭的空当而已。 选个合适的时候，放一挂鞭炮。以前村子很小，大家有红事会早早通知，而且通常是早上(结婚的鞭炮不会晚于中午)。所以如果下午突然有人放鞭炮了，十有八九是有人去世了。丧事是不能通知的，要让大家听说了自己前往祭拜。后来发展成了自己村里的不通知，村外的电话通知。现在村子大了，再加上今年大家都不外出，所以还是电话通知了，也算是与时俱进了。 葬礼时因为是过年，再加上如今的节奏越来越快，去世的第二天就举行了葬礼。以前结婚的时候要回四，也就是说，婚礼后四天，要去新娘家里再办一次。现在请假难，好多都变成回二，甚至是两家一起办了。所以习俗其实一直在巧妙的迎合着时代。 清早我们要去报小庙。报庙的缘由我没有去问，大意是让土地公公或者别的神明能够放行，或者让人知道你是哪家人。 前面是力士开路，边走边放鞭炮。我们在后面，偶尔聊聊，不哭。我爸偶尔抹眼泪，我妈和伯母则是发出哭声。这哭声是礼数的要求。 我们村修了土地庙，其实就是一个露天的牌位。大家走到那边，撒酒，烧纸钱，念出我爷爷的姓氏。我们听着主持人的号令，扣头，谢客之类的。 回程我们擦干泪痕，有说有笑。 大约10点左右，我们要去报大庙，相比于小庙，更隆重一些，大家也开始哭了，流程基本跟小庙一致。我们手上多了一条缠着黄麻纸缠着的拐杖，具体含义未知，感觉是过于悲痛，必须要拄拐走路。 大约11点多，灵车到来，播放葬礼音乐，开始了送葬。力士抬着尸体，我们追随在后面。力士抬上灵车的时候，我妈和伯母抓住不让抬，我爸和伯父跪在地上无法起身，被大家都拉开。然后我们继续跟在灵车后面，走几步就对着灵车扣头。中途要丢掉木棍，不知何意。就这样一直走到村口，主持人大概喊着送行的字眼，我爸和伯父依然是倒在地上不肯起身，我妈和伯母抓着灵车不肯放手，被力士强行拉开。这里作为女儿和媳妇，要在地上打滚，表示对离去的人的不舍。然后灵车就开走了。 此时送葬的礼仪算是完成，父母依然在的人，要把帽子撕掉，揣在兜里。我爸一边抹眼泪，一边把麻衣脱了给我。特殊期间，来送葬的人不多，我爸要去火葬场办一系列的手续，比如提供死亡证明，交钱，选骨灰盒之类的，还是自己去放心一些。 我妈和伯母则是抹了眼泪之后，叫大家去吃饭。力士是一定要请吃饭的，如果不是过年+特殊时期，来送葬的人都要去吃饭。作为儿子，因为悲痛无心吃饭，其实是要单独在房间里吃的，不能见客。特殊时期，伯父也顶上，陪大家吃饭，给大家敬酒。 另外一边也煮了饺子，参加过葬礼的人一定要每个人都吃饺子，具体的原因未知。不过可以猜得出来，就像红色可以冲淡白事，在北方，饺子也是个好东西，可以冲淡白事。等我爸差不多也跟着灵车回来，就开始了下葬礼仪。 大家在门口烧了点纸，放一个脸盆，里面放了一些五谷，压在烧完的纸钱之上。力士早早的出发去把坟给挖开，我奶奶已经去世了，坟是提前留好位置的。送葬队伍到达之后，把骨灰盒放入坟墓，骨灰盒的照片要对着家的位置，伯母还把爷爷的烟袋放进去了，撒了一些硬币，就埋了。 土堆弄好之后就开始圆坟，主持人在前面拿着锄头，在前面挥舞，伯父在后面跟着撒五谷。一边走，一边念叨着 “一撒金，二撒银，三撒子女过得好” 其中很多句，我只记得这一句 圆坟结束之后，就把带来的纸钱和花圈都在坟前烧掉。我们在坟前分吃一块非常冷面，没有油的饼。扣头，回家。 儿子和儿媳要在门口用刚才提到的脸盆洗脸，然后用门口的麻擦脸。全部洗完之后，有人会把水泼出去。然后看地上的灰，看着像什么，就会托生成什么。我一个伯母说，像猫。 葬礼后当天下午要去烧盘缠，有一架马车和很多纸钱。主持人首先念一个收据，大约就是多少多少钱，白马一批，马车一辆，XXX收之类的。马的四脚是被捆住的，主持人首先把马的脚链给剪开，然后用一根针在马头马身马尾上扎，口里念念有词。还会找一个小孩，问他，死去的人是不是在里面。找我小侄女去的时候，我小侄女竟然说不出话来。 这个盘缠是个小盘缠，真正的盘缠是在几天后烧的。到时候会有更多的纸钱，电视，冰箱，甚至是电脑都会有。 到了此时，葬礼基本算是结束了。之后一般有几个日子比较重要，头七，三七，五七，周年，都是要举办一些仪式的，直到三周年之后，就不再有礼仪了。 其他葬礼里最欣赏的就是我爸了，一边抹眼泪，一边冷静的处理这一系列事情。还不忘找我吐槽谁谁谁不地道之类的，还责怪我妈处事不力。 仪式里，虽然有很多虚假的感情在，但是有些时候真的很容易让人哭出来。比如我爷爷送葬前，要往他手里塞小馒头(看起来像)，并且一边说道： “爸，如果路上遇到了恶鬼，你就把吃的都给他。如果他还不放你走，你就说，儿孙都孝顺，钱在后面，让他们放你走” “爸，手里的东西好好拿着，过了陡崖山(我们家附近的最高峰)再扔” 我爸说这些的时候哭的像个孩子。 这让我想起参加一个朋友的婚礼的时候，抢亲结束的时候，新娘的大姨送到楼下，对着新娘大喊： “别回头” 我们在场的所有人都鼻子一算，新娘直接哭了出来。 更多的时候，真情实感是在仪式之外的流露的。葬礼的当天晚上，伯父感叹到 “前天还有说有笑的，我还去别人家里把他赶回了家，让他特殊时期不要出门，今天就已经埋在土里了” 这让我想起很久之前，我陪我妈去给外公上坟，我妈对着坟堆感叹到： “之前还经常去给他送饭，还烦他半夜打电话骚扰，还骂他老是喝的醉醺醺的，现在，就只剩一个土堆”","raw":null,"content":null,"categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://blog.0x01.site/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"Python环境安装合集","slug":"无法安装mysql-python的解决办法","date":"2019-07-21T15:09:58.000Z","updated":"2021-04-16T14:48:39.047Z","comments":true,"path":"2019/07/21/无法安装mysql-python的解决办法/","link":"","permalink":"http://blog.0x01.site/2019/07/21/%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85mysql-python%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"无法安装mysql-python的解决办法公司的电脑按键坏了（有人要买2017款的macbook pro的记得要避坑），把自己的电脑安装公司需要的环境。\n本来pip install -r requirements一行命令就能解决的事情，遇到了mysql-python。这个库是有名的难装，之前帮同事在windows下解决这个问题的时候也卡了好久。","text":"无法安装mysql-python的解决办法公司的电脑按键坏了（有人要买2017款的macbook pro的记得要避坑），把自己的电脑安装公司需要的环境。 本来pip install -r requirements一行命令就能解决的事情，遇到了mysql-python。这个库是有名的难装，之前帮同事在windows下解决这个问题的时候也卡了好久。 执行如下命令 1pip install mysql-python 会出现如下错误 12345678building &#x27;_mysql&#x27; extensioncreating build/temp.macosx-10.13-x86_64-2.7clang -fno-strict-aliasing -fno-common -dynamic -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -Dversion_info=(1,2,3,&#x27;final&#x27;,0) -D__version__=1.2.3 -I/usr/local/Cellar/mysql/8.0.11/include/mysql -I/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c _mysql.c -o build/temp.macosx-10.13-x86_64-2.7/_mysql.o_mysql.c:36:10: fatal error: &#x27;my_config.h&#x27; file not found#include &quot;my_config.h&quot; ^~~~~~~~~~~~~1 error generated.error: command &#x27;clang&#x27; failed with exit status 1 网上有各种各样的解决办法，最好用的是这个办法 12LDFLAGS=-L/usr/local/opt/openssl/lib pip install mysqlclientLDFLAGS=-L/usr/local/opt/openssl/lib pip install mysql-python 不管装什么mysql相关的库，都可以试一下上面的这个命令 不过，最好的是直接切换到pymysql上去。 无法安装m2crypto报错如下 123456789SWIG/_m2crypto_wrap.c:2868:10: note: initialize the variable &#x27;res&#x27; to silence this warning int res; ^ = 0SWIG/_m2crypto_wrap.c:3561:10: fatal error: &#x27;openssl/err.h&#x27; file not found#include &lt;openssl/err.h&gt; ^~~~~~~~~~~~~~~1 warning and 1 error generated.error: command &#x27;cc&#x27; failed with exit status 1 解决方案如下 12brew install opensslbrew install swig 然后是 1234env LDFLAGS=&quot;-L$(brew --prefix openssl)/lib&quot; \\CFLAGS=&quot;-I$(brew --prefix openssl)/include&quot; \\SWIG_FEATURES=&quot;-cpperraswarn -includeall -I$(brew --prefix openssl)/include&quot; \\pip install m2crypto 但是又报了如下错误 12AttributeError: &#x27;module&#x27; object has no attribute &#x27;X509_up_ref&#x27;WARNING: Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by &#x27;SSLError(SSLError(&quot;bad handshake: Error([(&#x27;SSL routines&#x27;, &#x27;ssl3_get_server_certificate&#x27;, &#x27;certificate verify failed&#x27;)],)&quot;,),)&#x27;: /simple/m2crypto/ 应该是openssl的版本太低导致的 12pip uninstall pyOpenSSLpip install pyOpenSSL 然后再执行上面的命令解决了。","raw":null,"content":null,"categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://blog.0x01.site/tags/python/"}]},{"title":"美国之行","slug":"美国之行","date":"2019-05-16T15:44:44.000Z","updated":"2021-04-16T14:48:39.047Z","comments":true,"path":"2019/05/16/美国之行/","link":"","permalink":"http://blog.0x01.site/2019/05/16/%E7%BE%8E%E5%9B%BD%E4%B9%8B%E8%A1%8C/","excerpt":"去美国德州玩了一圈，感慨良多，趁着热乎劲，记录一下。","text":"去美国德州玩了一圈，感慨良多，趁着热乎劲，记录一下。 大龙与我同届，工作两年后毅然辞去工作，歇业一年学习雅思，学习知识，申请到了德州大学达拉斯分校。适逢大龙毕业，赶紧跑去美国体验了一番。 大龙的学费花费了7，8万刀，跟女朋友一起住，住宿费省了，买车1万刀(二手的捷达), 生活费约2万刀。2年的学习生涯，花费了大约10万刀。 我们在休斯顿见面，住在了一个黑人做的Airbnb里。无意到翻到房主的一张非常大的毕业照，感觉是个挺高端的大学的样子。 德州这边法律规定了居住人口与车位数量的比例，比如我们住的公寓，有着与楼高一样的停车场，而且每一层的面积都不小。这样也直接导致了德州几乎没有步行街之类的商业集合地。 出行几乎全靠车。我去的那几天有暴雨，有一天还下了拇指大的冰雹，但是因为有车，几乎没受什么干扰，甚至连撑伞的场合都很少。 休斯顿的downtown几乎没什么人，除了一些流浪汉。大龙说，在加州，流浪汉占据downtown已经是趋势了，导致downtown的治安已经非常不好。这篇文章也谈到了类似的事情，白左的思想还是有后遗症的。 第一站就去了莱斯大学。我很感激当年的coursera入华，极少的课程有中文字幕，其中就有一门Python的入门课。莱斯大学的这门课，不拘泥于带你学会一门语言，每节课他都会让你做出点东西来，大部分时候是个游戏，非常非常有趣。最主要的是，以前学语言坚持不下来，是因为不知道用来干什么，也没什么成就感。我一边学着这么课程，一边对着书敲语法，从此人生都改变了。 莱斯大学满眼望去都是矮矮的漂亮的楼，网球场挺多，我全程都是痴汉脸。 第二站去了马刺主场。AT&amp;T球馆整体的设计都是黑白风，抬头望去是五座冠军旗帜和邓肯吉诺比利们的退役球衣。解说是个大腹便便的白发爷爷，讲解的时候非常自豪，也看得出来非常热爱自己的工作。我还是全程痴汉脸。 然后就是看火箭与勇士的game6，非常棒的主场氛围，嘘声和加油声非常响亮，投中了关键三分，大家也会提前站起来。后面的老哥一直喊：Come on，Capella，do something! 这三者都好像朝圣，总算实现了梦想。 后面去了NASA，也去新奥尔良吃很大的生蚝，还在酒吧看了猛龙对76人的game7，莱昂纳德的绝杀非常精彩。 大龙的开车的时候闲聊，我们互相复盘了一下到目前为止各自的人生。 我觉得自己的认知总是晚了生活一步。我如果早点了解贷款没有那么可怕，恐怕早就贷款买房上车了。如果我早点了解贷款没那么可怕，恐怕万科的跟投也投的早，投的多，收益也会多。总之都是这些落后于生活的简单的小事。如果我早点知道大学要好好学习，就不会对好多事情都这么无知了。如果我大学选择了一个大城市，恐怕会早点了解到好多事情。我们都非常感慨，无论是否从事本专业的工作，努力学习都非常有必要，很多基础的知识，你只会在此时此刻最容易学习，专业课的好多思想日后都能借鉴到。很多时候，不是你的技能多么牛逼导致你不同，恰恰是那些无用的积累，导致你胜出。 如果正向复盘，我从小到大就是差不多的优等生。学习前5，实验班可能是前20，高中经历了一波低谷，但是很自然的就爬上来了。但是也不是很努力，反正成绩差不多就可以了，从来没想到几分就能改变自己的人生。报大学志愿的时候，因为感觉不太保险，从大连理工改成了大连海事，也因为自己从小到大一直没有出过省，就报了一个出了省，但是离家最近的城市。倘若是大连理工这种比较重视编程的学校，会不会早点走上写代码的路？如果Coursera能在我大三前入华，我会不会早点了解到努力学习的重要性？会不会早点走上编程的路？如果我在学校里接触了编程，我能不能找到一个稍微大一点的公司？我在前两份工作里，跟同事几乎不交流生活。到了万科之后，才发现大家如此不同，大家也都非常愿意分享自己的经验，如果我刚毕业就了解了这些事情，是不是人生也都不一样了？ 不过这些都假设，我觉得如果没有真的经历过，我可能就算了解了这些事情，也都不会理会。 与其感慨，不如实际行动。这次出去也了解了学习英语的重要性，也受大龙的感染，要随时随地的进步。这几天就制定下学习英语和学习技术的计划，努力做一个优秀的人。 附：大龙的英语学习之路https://www.zhihu.com/question/20166937/answer/157709202","raw":null,"content":null,"categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://blog.0x01.site/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"Python3+pymysql的utf8的编码问题","slug":"Python3-pymysql的utf8的编码问题","date":"2019-04-06T12:42:57.000Z","updated":"2021-04-16T14:48:39.043Z","comments":true,"path":"2019/04/06/Python3-pymysql的utf8的编码问题/","link":"","permalink":"http://blog.0x01.site/2019/04/06/Python3-pymysql%E7%9A%84utf8%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/","excerpt":"Python3弱化了utf8的编码问题，但是倒是有些让我手足无措，不知道该怎么处理编码问题","text":"Python3弱化了utf8的编码问题，但是倒是有些让我手足无措，不知道该怎么处理编码问题 123456data = &#123; &quot;我&quot;: &quot;一个学生&quot;&#125;data = json.dumps(data)sql = &quot;insert into the_table (data) values (&#x27;%s&#x27;)&quot; % datacursor.execute(sql) 发现存的数据应该是\\u6d88，但是实际上却是u6d88，查了好多资料，发现其实解决方式很简单 12sql = &quot;insert into the_table (data) values (%s)&quot;cursor.execute(sql, (data, )) 关键点在于，数据的填充交给mysql库，也不要加引号。 感觉手越来越生了。","raw":null,"content":null,"categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.0x01.site/tags/Python/"}]},{"title":"Python抓取网站报ssl证书验证失败的问题","slug":"Python抓取网站报ssl证书验证失败的问题","date":"2019-03-31T02:44:51.000Z","updated":"2021-04-16T14:48:39.044Z","comments":true,"path":"2019/03/31/Python抓取网站报ssl证书验证失败的问题/","link":"","permalink":"http://blog.0x01.site/2019/03/31/Python%E6%8A%93%E5%8F%96%E7%BD%91%E7%AB%99%E6%8A%A5ssl%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"最近在测试爬虫的时候，发现ZF的网站会报certificate verify failed的错误","text":"最近在测试爬虫的时候，发现ZF的网站会报certificate verify failed的错误 这是因为我国ZF的网站的证书不少都没有经过国际认证，浏览器访问没有问题，应该大家都针对性的优化了吧。 具体的报错是 HTTPSConnectionPool(host=’www.somesite.cn&#39;, port=443): Max retries exceeded with url: / (Caused by SSLError(SSLError(“bad handshake: Error([(‘SSL routines’, ‘tls_process_server_certificate’, ‘certificate verify failed’)],)”,),)) 虽然走了不少弯路，但是解决起来也非常容易 1requests.get(&#x27;https://www.somesite.cn&#x27;, verify=False) 不验证就好了。","raw":null,"content":null,"categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.0x01.site/tags/Python/"}]},{"title":"如果修改MySQL的密码","slug":"如果修改mysql的密码","date":"2019-03-30T15:56:12.000Z","updated":"2021-04-16T14:48:39.046Z","comments":true,"path":"2019/03/30/如果修改mysql的密码/","link":"","permalink":"http://blog.0x01.site/2019/03/30/%E5%A6%82%E6%9E%9C%E4%BF%AE%E6%94%B9mysql%E7%9A%84%E5%AF%86%E7%A0%81/","excerpt":"说来惭愧，曾经帮高老师装MySQL，以前的时候都会弹出密码输入框，但是，竟然没有弹。今天在树莓派上安装，也是没有任何提示。","text":"说来惭愧，曾经帮高老师装MySQL，以前的时候都会弹出密码输入框，但是，竟然没有弹。今天在树莓派上安装，也是没有任何提示。 查了一下，使用下面的命令可以无密码登入 1sudo mysql --defaults-file=/etc/mysql/debian.cnf 文件的位置需要自己去找。我尝试下面的命令去重置root，发现并没有用 1ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;new_password&#x27; 提示我语法错误，懒得去整了。使用下面的命令去重置密码，发现依然无法登陆 1SET PASSWORD FOR &#x27;root&#x27;@&#x27;localhost&#x27; = PASSWORD(&#x27;new_password&#x27;); 干脆新增了一个账户 123CREATE USER &#x27;pig&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;GRANT ALL ON *.* TO &#x27;pig&#x27;@&#x27;%&#x27;;FLUSH PRIVILEGES; 搞定。 值得一提的是，虽然每次安装同样大版本的MySQL，每一次的配置文件之类的细节，都不太一样","raw":null,"content":null,"categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"http://blog.0x01.site/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"符合配置shadowsocks为chacha20的加密方式","slug":"符合配置shadowsocks为chacha20的加密方式","date":"2019-01-13T15:10:24.000Z","updated":"2021-04-16T14:48:39.047Z","comments":true,"path":"2019/01/13/符合配置shadowsocks为chacha20的加密方式/","link":"","permalink":"http://blog.0x01.site/2019/01/13/%E7%AC%A6%E5%90%88%E9%85%8D%E7%BD%AEshadowsocks%E4%B8%BAchacha20%E7%9A%84%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F/","excerpt":"配置shadowsocks很简单，但是据说chacha20-ietf-poly1305的加密协议更快更安全一些，现在客户端基本也都支持了。\n但是大龙试了没有成功，我之前换服务器的时候，也没有成功。今天用一台白纸服务器尝试，非常顺利的成功了，趁着有记忆，赶紧写下来","text":"配置shadowsocks很简单，但是据说chacha20-ietf-poly1305的加密协议更快更安全一些，现在客户端基本也都支持了。 但是大龙试了没有成功，我之前换服务器的时候，也没有成功。今天用一台白纸服务器尝试，非常顺利的成功了，趁着有记忆，赶紧写下来 服务器是AWS的lightsail，Ubuntu 16.04，据GitHub上的讨论，14.04比较麻烦 上来首先更新下包 1sudo apt-get update 然后安装pip 1sudo apt-get install python-pip 然后装最新版的shadowsocks的包，当时这个帖子讨论的时候，shadowsocks依然不支持上述协议 1sudo pip install --upgrade git+https://github.com/shadowsocks/shadowsocks.git@master 然后需要安装系统依赖， 参考的是这个教程, 不过我不太喜欢pip加-U命令 1sudo apt install libsodium-dev 然后创建一个shadowsocks配置文件，放在/etc/shadowsocks.json, 参考的是官方文档 12345678910&#123; &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;server_port&quot;:8388, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;mypassword&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;, &quot;fast_open&quot;: false&#125; 然后先跑起来，然后客户端连接测试一下 1ssserver -c /etc/shadowsocks.json 看看日志是否正常，如果正常，则说明配置ok，我中间遇到了Decrypt failed的错误，事实证明，不要相信自己。(是因为客户端密码输错了) 然后选择自己喜欢的方式来让进程以daemon运行就好，最简单的是 1sudo ssserver -c /etc/shadowsocks.json -d start 不过我没用这个，我用的是supervisor来托管的进程，可以做到进程退出自动自动，服务器启动也能自动启动。 首先安装supervisor 1sudo pip install supervisor 然后是配置supervisor 12echo_supervisord_conf &gt; supervisord.confsudo mv supervisord.conf /etc/ 编辑supervisor文件，在最后加上以下配置(如果有别的业务要用到，最好还是分文件) 1234[program:shadowsocks]command=ssserver -c /etc/shadowsocks.jsonstdout_logfile = /tmp/shadowsocks.logstderr_logfile = /tmp/shadowsocks_err.log 当然我不止做了这些，我通常会改掉supervisor.sock, supervisor.pid的位置，放到/tmp目录不会自动重启，另外，supervisord的日志文件比较重要，我通常也会改走日志路径 然后启动supervisord, 这里不要加sudo，否则日志文件容易是root权限 1supervisord -c /etc/supervisord.conf 之后如果要管理进程，可以用下面的命令 12supervisorctl statussupervisorctl restart shadowsocks","raw":null,"content":null,"categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"http://blog.0x01.site/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"2018总结","slug":"2018总结","date":"2018-12-27T14:00:50.000Z","updated":"2021-04-16T14:48:39.043Z","comments":true,"path":"2018/12/27/2018总结/","link":"","permalink":"http://blog.0x01.site/2018/12/27/2018%E6%80%BB%E7%BB%93/","excerpt":"不出所料，又是失败的一年","text":"不出所料，又是失败的一年 2018离开工作了快三年的地方转投Shopee，上一份工作是我目前最喜欢的工作，一步步建立，一步步成为老员工，对工作中的任何一个细节都了如指掌。 进了Shopee之后，越来越感觉自己没有成长。技术上的事情对我来说没有难度，不过也确实暴露了我基础知识不扎实的问题，对数据库的原理一无所知 今年失败经历，简单来说就是以下几点 股市无脑入，经历大跌，及时止损，但是基金依然亏了许多 比特币无脑入，损失2/3 美股头脑发热入我司股票，无视中美贸易战，亏 跟海兵一起找了贷款中介，被骗1万有余，人生第一次去了公安局报案 浑浑噩噩过了这一年，新的一年无论如何都要努力了。 按照以往的失败的过程，依然定一些目标 多读书，把之前标注想读的书都读了 教高老师学Python 认真的学习一门新语言 做一个小程序，并且发布 啃完MySQL那本大厚书 另外新的一年筹划买辆二手车吧😊","raw":null,"content":null,"categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://blog.0x01.site/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"高老师Python培养计划","slug":"高老师Python培养计划","date":"2018-12-26T16:26:08.000Z","updated":"2021-04-16T14:48:39.048Z","comments":true,"path":"2018/12/27/高老师Python培养计划/","link":"","permalink":"http://blog.0x01.site/2018/12/27/%E9%AB%98%E8%80%81%E5%B8%88Python%E5%9F%B9%E5%85%BB%E8%AE%A1%E5%88%92/","excerpt":"高老师想学Python，我就学着高老师，做一个计划出来，每周更新一次","text":"高老师想学Python，我就学着高老师，做一个计划出来，每周更新一次 很久之前教瓜瓜学Python，瓜瓜比较努力，竟然就学会了，还能自己写点东西。于是有点膨胀，想要教高老师。 今年年初的时候，想要跟瓜瓜一起做一个Python教程的小程序，连域名都买好了(databurger.cn)。可惜因为我的懒惰而中止。希望我这次给高老师定课程的时候，能够记录下来，如果以后重启这个事情，还可以拿过来用。 目标我从来不觉得产品应该学会写web，写程序员工作的那些东西，应该把在生活中会用到的东西作为目标。所以我定的总体目标是 会用Python做简单的数据分析。比如分析数据的趋势，做图表，分析结果可以从Excel中读取，写入到Excel中 会用Python写爬虫，抓取网页上的信息。这个是很有乐趣的，也是数据分析的数据来源 稍微高阶点的，但是又与主线无关的目标 学会Git以及用GitHub托管自己的代码。Git是很好用的版本控制工具，也可以理解程序员之间是怎么合作的，用GitHub托管自己的代码，可以很好的提高自己的幸福感 学会用Python操作数据库。高老师比较厉害的是，会写SQL，底子不错。而且自己抓取下来的数据，能够存到数据库中，也是很有幸福感的事情 希望能够通过实现这些目标，让高老师能够感受到写代码的乐趣 每周课程安排 每个周找一个晚上，授课 周末则是检查作业，提出自己的修改意见和提出预习的条目 课程具体安排第一周目标 配置环境。上次已经给高老师配置好环境了，数据库的密码一直设置不成功，以后找机会再设置 给出双方的合作方式(希望在不久的未来，可以通过Pull Request的方式来合作) 熟悉Python的交互命令行 熟悉Python的语法结构和数据类型和简单的运算符 熟悉如何执行Python的脚本 熟悉如何整理自己的代码 作业总结第二周待续….","raw":null,"content":null,"categories":[],"tags":[{"name":"教程","slug":"教程","permalink":"http://blog.0x01.site/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"如何重装hexo","slug":"如何重装hexo","date":"2018-12-26T15:29:56.000Z","updated":"2021-04-16T14:48:39.046Z","comments":true,"path":"2018/12/26/如何重装hexo/","link":"","permalink":"http://blog.0x01.site/2018/12/26/%E5%A6%82%E4%BD%95%E9%87%8D%E8%A3%85hexo/","excerpt":"电脑的npm给删了，于是想要重装Hexo，走了不少弯路，后来发现了方法，记下来留着以后迁移用","text":"电脑的npm给删了，于是想要重装Hexo，走了不少弯路，后来发现了方法，记下来留着以后迁移用 npm重装了之后，hexo没有安装，需要安装，如果以前有过，但是现在报错，也建议重装。原链接 123sudo npm uninstall hexo-cli -gsudo npm uninstall dtrace-provider -gsudo npm install hexo-cli -g --no-optional 发现依然不可以，于是删掉生成的目录，重新生成来自Github 1rm -rf node_modules/ &amp;&amp; npm install 如果报Local hexo not found in的错误，用上述方法也能解决 然后执行命令清除hexo的文件重新生成 12hexo cleanhexo server 我因为引用了两个插件，会报下面的错误 1234ERROR Plugin load failed: hexo-generator-feedError: ENOENT: no such file or directory, open &#x27;/Users/gongting/py-develop/github/myblog/node_modules/hexo-generator-feed&#x27;ERROR Plugin load failed: hexo-generator-sitemapError: ENOENT: no such file or directory, open &#x27;/Users/gongting/py-develop/github/myblog/node_modules/hexo-generator-sitemap&#x27; 在_config.yml里，注释掉这两个插件即可","raw":null,"content":null,"categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"http://blog.0x01.site/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"新版Nginx的HTTPS的配置","slug":"新版Nginx的Https的配置","date":"2018-06-24T15:00:56.000Z","updated":"2021-04-16T14:48:39.047Z","comments":true,"path":"2018/06/24/新版Nginx的Https的配置/","link":"","permalink":"http://blog.0x01.site/2018/06/24/%E6%96%B0%E7%89%88Nginx%E7%9A%84Https%E7%9A%84%E9%85%8D%E7%BD%AE/","excerpt":"最近迁移了一台服务器，Nginx配置好了HTTPS的证书之后，浏览器一直报ERR_SSL_PROTOCOL_ERROR的问题","text":"最近迁移了一台服务器，Nginx配置好了HTTPS的证书之后，浏览器一直报ERR_SSL_PROTOCOL_ERROR的问题 从nginx的一个低版本迁移到了1.10.3版本，证书是使用的阿里云的免费证书。配置好了之后用浏览器访问一直报ERR_SSL_PROTOCOL_ERROR的错误，在error日志里看，则显示recv() not ready (11: Resource temporarily unavailable 而且我基本是从我的老服务器上给抄过来的，所以按照道理来说不存在配置失败，或者证书无效的事情。 小宇帮我找到了答案。原链接在这里 补充说明，在配置多个https网站的时候，会报错：a duplicate default server for 0.0.0.0:443 in…nginx版本换成1.13.8之后配置多个https网站没有问题了，不过仍然有一个站点需要在443端口后面加default，其他站点则不需要。（我是对nginx不熟，高手看到了的话可以解释一下为什么） 当有多个HTTPS网站的时候，必须在其中的一个上加default。于是我把配置改成了 1listen 443 default ssl http2; 一切正常了。原链接里有说会看到 a duplicate default server 的错误，但是我却没有看到。难道说版本过低的原因？ 另外，这个版本的nginx还有一个我没见过的坑，如果没有设置默认的server name的解析，那么如果一个server name没有配置，则会匹配到第一个server上。 比如我配置了 a.0x01.site，而 b.0x01.site 也是解析到这台服务器，即使我没有配置后者，依然会匹配到 a.0x01.site 上。查了一下，加了默认配置。 1234567891011server &#123; listen 80; server_name _; return 404;&#125;server &#123; listen 443; server_name _; return 404;&#125; 突然就感觉自己有点落伍了呢。","raw":null,"content":null,"categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"http://blog.0x01.site/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"使用Redis设计锁","slug":"使用Redis设计锁","date":"2017-11-15T15:04:22.000Z","updated":"2021-04-16T14:48:39.044Z","comments":true,"path":"2017/11/15/使用Redis设计锁/","link":"","permalink":"http://blog.0x01.site/2017/11/15/%E4%BD%BF%E7%94%A8Redis%E8%AE%BE%E8%AE%A1%E9%94%81/","excerpt":"使用Redis来实现分布式锁，发现自己的设计，还是有漏洞","text":"使用Redis来实现分布式锁，发现自己的设计，还是有漏洞 完美做法之SETNXSETNX 是set if not exists的缩写，会返回整数值 1，当值未被设置 0，值已经被设置 于是我们可以这么设置锁 进程1SETNX KEY返回1，则获得锁 进程2SETNX KEY返回0，则未获得锁，继续等 进程1结束，DEL KEY 进程死锁怎么办? 在获得锁之后，设置一个redis key的过期时间。 上面的方法有个问题，一个进程一旦超时，删除的锁其实是别的进程的锁，这个时候要怎么办呢？ 再添加个定时器，知晓自己是否超时，决定是否执行DEL 最完美做法之SETNX EXPIRE来自这里 把expire记在value上 进程1SETNX KEY返回1，则获得锁，把值设为expire 进程2SETNX KEY返回0，说明锁在，此时GET KEY判断expire是否超时 进程2判断已经超时，则DEL KEY 这里也有个问题，假设进程3同时也判断超时，会执行跟进程2一样的操作，会同样获得锁 进程2判断已经超时，则GETSET KEY，GETSET会返回之前的值，如果now &gt; value才是拿到锁 进程3判断已经超时，则GETSET KEY， 此时拿回的值，比目前的时间大，则不会获得锁。因为这是同时并发的行为，重新设置了一个稍大的expire是可以接受的 次完美做法之集合可以使用redis的集合的唯一性来做，集群也应该没问题 进程1拿到锁，SADD KEY 1，往集合中添加元素1 进程2SADD KEY 1，返回0，则未获得锁 进程1做完，SREM KEY 1 此时进程2SADD KEY 1，返回1，则获得锁 至于进程死锁的问题，依然只能通过给key设置expire的方式来做，依然需要在进程结束时，判断是否超时 一般做法INCR 进程1拿到锁，INCR KEY得到1 进程2INCR KEY得到2，则未获得锁 进程1释放锁，DEL KEY 问题很多，锁对应的值会不断的增大，依然要在进程中判断是否超时","raw":null,"content":null,"categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.0x01.site/tags/Python/"}]},{"title":"docker的一系列操作","slug":"docker的一系列操作","date":"2017-08-31T14:12:51.000Z","updated":"2021-04-16T14:48:39.044Z","comments":true,"path":"2017/08/31/docker的一系列操作/","link":"","permalink":"http://blog.0x01.site/2017/08/31/docker%E7%9A%84%E4%B8%80%E7%B3%BB%E5%88%97%E6%93%8D%E4%BD%9C/","excerpt":"记录一些常用的操作，备忘","text":"记录一些常用的操作，备忘 docker-compose-file里volumes, hosts, 老是忘 1234volumes: - host_dir:container_dirports: - host_port:container_port 接入一个已经存在的network 1docker run -it --rm --network=postgres_default postgres psql -h postgres1 -U postgres db 导入postgres的数据, 创建一个临时镜像，然后在里面操作 1docker run -it --rm --network=postgres_default -v host_dir:/tmp postgres /bin/bash","raw":null,"content":null,"categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://blog.0x01.site/tags/docker/"}]},{"title":"如何安装docker","slug":"如何安装docker","date":"2017-08-31T12:42:15.000Z","updated":"2021-04-16T14:48:39.046Z","comments":true,"path":"2017/08/31/如何安装docker/","link":"","permalink":"http://blog.0x01.site/2017/08/31/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85docker/","excerpt":"在我国的网络环境下，如何安装docker呢","text":"在我国的网络环境下，如何安装docker呢 首先按照Docker的手册，先清除之前的安装的信息 1sudo apt-get remove docker docker-engine docker-ce docker.io 安装虚拟环境支持(或许不是？) 123sudo apt-get updatesudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual 下载Docker Engine太慢了，这里采用阿里云的源，一键无脑安装 12curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh - 安装成功后，先别急着跑hello-world，先改成国内的镜像源 Docker自动创建的目录，权限收的太紧了。 1sudo chmod -R +xr /etc/docker 我习惯把docker的镜像放在数据盘上，创建目录 12sudo mkdir /data/dockersudo chown myname:myname /data/docker 修改里面的daemon.json 123456&#123; &quot;registry-mirrors&quot;: [&quot;https://*.mirror.aliyuncs.com”], &quot;insecure-registries&quot; : [&quot;10.0.0.222:5000&quot;], &quot;graph&quot;: &quot;/data/docker&quot;, &quot;dns&quot;: [&#x27;6.6.6.6&#x27;, &#x27;8.8.8.8&#x27;]&#125; 内部用了一个不需要登录的registry，以及希望容器都走内部的dns，都在这里配置。 重载docker的配置 1sudo service docker reload 然后跑hello-world 1docker run hello-world 显示为 12Hello from Docker!This message shows that your installation appears to be working correctly. 表示安装成功了","raw":null,"content":null,"categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://blog.0x01.site/tags/docker/"}]},{"title":"解决docker-compose启动时urllib3报错的问题","slug":"解决docker-compose启动时urllib3报错的问题","date":"2017-08-31T12:34:31.000Z","updated":"2021-04-16T14:48:39.047Z","comments":true,"path":"2017/08/31/解决docker-compose启动时urllib3报错的问题/","link":"","permalink":"http://blog.0x01.site/2017/08/31/%E8%A7%A3%E5%86%B3docker-compose%E5%90%AF%E5%8A%A8%E6%97%B6urllib3%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"使用pip安装了docker-compose之后，启动时报了如下如下错误","text":"使用pip安装了docker-compose之后，启动时报了如下如下错误 12345678910111213141516171819202122232425262728Traceback (most recent call last): File &quot;/usr/local/bin/docker-compose&quot;, line 7, in &lt;module&gt; from compose.cli.main import main File &quot;/usr/local/lib/python2.7/dist-packages/compose/cli/main.py&quot;, line 17, in &lt;module&gt; from . import errors File &quot;/usr/local/lib/python2.7/dist-packages/compose/cli/errors.py&quot;, line 11, in &lt;module&gt; from docker.errors import APIError File &quot;/usr/local/lib/python2.7/dist-packages/docker/__init__.py&quot;, line 2, in &lt;module&gt; from .api import APIClient File &quot;/usr/local/lib/python2.7/dist-packages/docker/api/__init__.py&quot;, line 2, in &lt;module&gt; from .client import APIClient File &quot;/usr/local/lib/python2.7/dist-packages/docker/api/client.py&quot;, line 11, in &lt;module&gt; from .build import BuildApiMixin File &quot;/usr/local/lib/python2.7/dist-packages/docker/api/build.py&quot;, line 9, in &lt;module&gt; from .. import utils File &quot;/usr/local/lib/python2.7/dist-packages/docker/utils/__init__.py&quot;, line 2, in &lt;module&gt; from .build import tar, exclude_paths File &quot;/usr/local/lib/python2.7/dist-packages/docker/utils/build.py&quot;, line 5, in &lt;module&gt; from .utils import create_archive File &quot;/usr/local/lib/python2.7/dist-packages/docker/utils/utils.py&quot;, line 18, in &lt;module&gt; from .. import tls File &quot;/usr/local/lib/python2.7/dist-packages/docker/tls.py&quot;, line 5, in &lt;module&gt; from .transport import SSLAdapter File &quot;/usr/local/lib/python2.7/dist-packages/docker/transport/__init__.py&quot;, line 3, in &lt;module&gt; from .ssladapter import SSLAdapter File &quot;/usr/local/lib/python2.7/dist-packages/docker/transport/ssladapter.py&quot;, line 22, in &lt;module&gt; urllib3.connection.match_hostname = match_hostnameAttributeError: &#x27;module&#x27; object has no attribute &#x27;connection&#x27; 在谷歌上查了一下，发现GitHub上有人报过类似issue，结果发现要升级urllib3的版本，还要需改一下path 1pip install urllib3==1.14 and 1export PYTHONPATH=/usr/local/lib/python2.7/dist-packages:/usr/lib/python2.7/dist-packages 另外，如果是系统初装，urllib3会报insecure的错误 1apt-get install python-openssl 完美解决 发现了一个可以避免的办法，就是不使用ubuntu自带的pip安装 12sudo easy_install pippip install docker-compose","raw":null,"content":null,"categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://blog.0x01.site/tags/docker/"}]},{"title":"如何修改Django_Admin的页面","slug":"如何修改Django-Admin的页面","date":"2017-08-02T13:04:58.000Z","updated":"2021-04-16T14:48:39.045Z","comments":true,"path":"2017/08/02/如何修改Django-Admin的页面/","link":"","permalink":"http://blog.0x01.site/2017/08/02/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9Django-Admin%E7%9A%84%E9%A1%B5%E9%9D%A2/","excerpt":"今天有人求助我如何修改Django Admin后台的页面，比如在右上角加个按钮","text":"今天有人求助我如何修改Django Admin后台的页面，比如在右上角加个按钮 原始需求是，他想做个导出按钮，可以导出当前页面的数据。 查了半天，Django Admin提供了一个change_list_template的一个方法，可以替代list的template 新建一个template，放在Django Admin规定的目录下，就会自动替代template。我这里直接修改了change_list_template 12345class MyModelAdmin(admin.ModelAdmin): model = MyModel list_display = [&#x27;name&#x27;, &#x27;description&#x27;, &#x27;created&#x27;, &#x27;updated&#x27;] fields = [&#x27;name&#x27;, &#x27;description&#x27;] change_list_template = &#x27;add_button.html&#x27; 然后去改add_button.html 123456789101112131415161718&#123;% extends &quot;admin/change_list.html&quot; %&#125;&#123;% block object-tools-items %&#125;&lt;script&gt;function export_file() &#123; var export_url = &#x27;/export&#x27;; var url = window.location.href; var params = url.split(&#x27;?&#x27;)[1]; if (typeof(params) !== undefined) &#123; export_url += &#x27;?&#x27; + params; &#125;; window.location.href = export_url;&#125;&lt;/script&gt;&lt;li&gt; &lt;a href=&quot;#&quot; class=&quot;grp-state-focus&quot; onclick=&quot;export_file()&quot; download=&quot;file.xls&quot;&gt;导出&lt;/a&gt;&lt;/li&gt;&#123;&#123; block.super &#125;&#125;&#123;% endblock %&#125; admin/change_list.html是原始模板，这个按钮所在的block是object-tools-items, 使用block.super来继承之前的内容 修改之后效果如下：","raw":null,"content":null,"categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.0x01.site/tags/Python/"}]},{"title":"shell显示乱码问题的解决","slug":"shell显示乱码问题的解决","date":"2017-04-13T10:03:39.000Z","updated":"2021-04-16T14:48:39.044Z","comments":true,"path":"2017/04/13/shell显示乱码问题的解决/","link":"","permalink":"http://blog.0x01.site/2017/04/13/shell%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/","excerpt":"今天遇见了一件离奇事，我的远端服务器突然显示不出一些常见字符了，或者给显示成别的字符了。","text":"今天遇见了一件离奇事，我的远端服务器突然显示不出一些常见字符了，或者给显示成别的字符了。特征是这样的 试过修改locale，甚至是重启过都不好用。最后经师兄指点， reset 使用这个命令就搞定了。出处","raw":null,"content":null,"categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"http://blog.0x01.site/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"如何安装cx_Oracle库","slug":"如何安装cx-Oracle库","date":"2017-03-29T11:17:30.000Z","updated":"2021-04-16T14:48:39.046Z","comments":true,"path":"2017/03/29/如何安装cx-Oracle库/","link":"","permalink":"http://blog.0x01.site/2017/03/29/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85cx-Oracle%E5%BA%93/","excerpt":"Oracle的Python客户端确实有点烦人，直接pip install是搞不定的，需要安装SDK和client。","text":"Oracle的Python客户端确实有点烦人，直接pip install是搞不定的，需要安装SDK和client。 首先去这里下载instantclient-sdk-linux-x86-64 和 instantclient-basic-linux-x86-64 然后要选择Oracle的目录，我一般都放在/var/www/oracle，在这个目录解压这两个压缩包 unzip instantclient-sdk-linux-x86-64-11.2.0.2.0.zip unzip instantclient-basic-linux-x86-64-11.2.0.2.0.zip 解压后的文件都会存放在instantclient_11_2，进入这个目录 ln -s libclntsh.so.11.1 libclntsh.so ln -s libocci.so.11.1 libocci.so 以上都是不同的版本的名字也不一样。Oracle不默认指定一个，也是醉了 然后需要指定Oracle的Home, vim ~/.bashrc，在末尾加上 # oracle export ORACLE_HOME=/var/www/oracle/instantclient_11_2 export LD_LIBRARY_PATH=$ORACLE_HOME export PATH=$ORACLE_HOME:$PATH 如果要立刻装，则需要source ~/.bashrc，然后就可以安装cx_Oracle了 pip install cx_Oracle","raw":null,"content":null,"categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.0x01.site/tags/Python/"}]},{"title":"如何配置MySQL主从数据库","slug":"如何配置MySQL主从数据库","date":"2017-03-29T10:58:36.000Z","updated":"2021-04-16T14:48:39.046Z","comments":true,"path":"2017/03/29/如何配置MySQL主从数据库/","link":"","permalink":"http://blog.0x01.site/2017/03/29/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEMySQL%E4%B8%BB%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93/","excerpt":"运维这种东西，时间只要久一点就会忘的一干二净，要把好的教程给记下来，也要自己记下来。万一教程的网站不在了呢","text":"运维这种东西，时间只要久一点就会忘的一干二净，要把好的教程给记下来，也要自己记下来。万一教程的网站不在了呢 继续上面的教程，配置MySQL的主从。试过几个教程，这个最好。首先自然是配置好两台MySQL数据库。 我们假设主从数据库分别是 10.0.0.1 - Master 10.0.0.2 - Slave 配置主库虽然教程推荐绑定IP，但是我是如下配置的，让任意IP都可以访问 bind-address = 0.0.0.0 配置server_id和binlog的目标，主从是依赖binlog来同步的 server-id = 1 log_bin = /var/log/mysql/mysql-bin.log binlog_do_db = sync_db 然后重启mysql sudo service mysql reload 连接上mysql，然后新建一个用户，用于从库访问 GRANT REPLICATION SLAVE ON *.* TO &apos;slave_user&apos;@&apos;%&apos; IDENTIFIED BY &apos;password&apos;; FLUSH PRIVILEGES; 然后切换到要同步的库，查看binlog的版本 use sync_db; show master sttus; 看到目前的binlog版本是mysql-bin.000001 1234567mysql&gt; SHOW MASTER STATUS;+------------------+----------+--------------+------------------+| File | Position | Binlog_Do_DB | Binlog_Ignore_DB |+------------------+----------+--------------+------------------+| mysql-bin.000001 | 107 | sync_db | |+------------------+----------+--------------+------------------+1 row in set (0.00 sec) 导出目前的数据库的所有数据 mysqldump -u root -p --opt sync_db &gt; sync_db.sql 配置从库导入在主库导出的数据库数据 create database sync_db; source sync_db.sql; 然后修改数据库的配置 server-id = 2 relay-log = /var/log/mysql/mysql-relay-bin.log log_bin = /var/log/mysql/mysql-bin.log binlog_do_db = sync_db 然后重启MySQL，连接到MySQL上之后，修改Master的配置 CHANGE MASTER TO MASTER_HOST=&apos;10.0.0.1&apos;,MASTER_USER=&apos;slave_user&apos;, MASTER_PASSWORD=&apos;password&apos;, MASTER_LOG_FILE=&apos;mysql-bin.000001&apos;, MASTER_LOG_POS=107; start slave; 查看Slave的状态 show slave status; 我一般都是看seconds_behind_master一栏不是NULL就ok了","raw":null,"content":null,"categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"http://blog.0x01.site/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"如何修改MySQL的datadir","slug":"如何修改MySQL的datadir","date":"2017-03-29T10:44:46.000Z","updated":"2021-04-16T14:48:39.045Z","comments":true,"path":"2017/03/29/如何修改MySQL的datadir/","link":"","permalink":"http://blog.0x01.site/2017/03/29/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9MySQL%E7%9A%84datadir/","excerpt":"部署一个mysql，应该算是基本功吧？可是我搞很多次才成功的","text":"部署一个mysql，应该算是基本功吧？可是我搞很多次才成功的 我在网上尝试了很多教程，觉得这个最好 MySQL安装完毕之后，会自动启动。先停机，然后修改配置。新版的目录一般都是 /etc/mysql/my.cnf，修改datadir到相应的目录 sudo service mysql stop 在配置文件中修改 datadir = /data/mysql/mysql 修改目标目录的权限 sudo chown -R mysql:mysql /data/mysql 然后把之前的数据转移到这个目录。推荐使用rsync，可以保留之前的文件的权限。我第一次不成功，就是因为有部分文件应该root用户的，而我给改成了mysql sudo rsync -av /var/lib/mysql /data/mysql 然后备份 sudo mv /var/lib/mysql /var/lib/mysql.bak 然后需要修改apparmor的配置，apparmor是ubuntu上安全相关的模块，有的教程推荐修改白名单，我之前尝试失败了，感觉设置别名更好 sudo vim /etc/apparmor.d/tunables/alias 然后加入这样一行，注意逗号 alias /var/lib/mysql/ -&gt; /data/mysql/mysql/, 然后重启apparmor服务 sudo service apparmor restart 因为mysql启动的时候会去检查/var/lib/mysql目录，所以我们依然要创建这个目录 sudo mkdir /var/lib/mysql/mysql -p 我忘记要不要改权限了，改了也不麻烦。然后就可以重启mysql了。 sudo service mysql start sudo service mysql status","raw":null,"content":null,"categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"http://blog.0x01.site/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"如何配置svn","slug":"如何配置svn","date":"2017-03-29T10:30:08.000Z","updated":"2021-04-16T14:48:39.046Z","comments":true,"path":"2017/03/29/如何配置svn/","link":"","permalink":"http://blog.0x01.site/2017/03/29/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEsvn/","excerpt":"设计师想要一个svn来存放设计材料，于是开搞。","text":"设计师想要一个svn来存放设计材料，于是开搞。 这篇文章不是手把手说怎么弄svn，只是记录下自己遇见的坑。 首先安装svn sudo apt install subversion apache2 libapache2-svn 再创建一个svn的home，然后创建版本库 svnadmin create /var/svn/project 虽然svn给出了官方的权限，实测要改成777然后进入项目目录的conf目录下，假设是上面的例子 cd /var/svn/project/conf 编辑svnserve.conf，把下面几项的注释去去掉 anon-access = none auth-access = write password-db = passwd 编辑passwd，加上用户名和密码 username = password 编辑authz，加上组和组权限 12345[groups]root = username[/]@root = rw 我就是这里出错的，定义目录权限的时候，原来给出的是 1[repository:/foo/bar] 实测，我如果没去掉repository，会一直提示认证失败 然后就可以起server了 svnserve -d -r /var/svn -r 后面跟的是根目录","raw":null,"content":null,"categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"http://blog.0x01.site/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"买房啊","slug":"买房啊","date":"2017-03-16T14:15:21.000Z","updated":"2021-04-16T14:48:39.044Z","comments":true,"path":"2017/03/16/买房啊/","link":"","permalink":"http://blog.0x01.site/2017/03/16/%E4%B9%B0%E6%88%BF%E5%95%8A/","excerpt":"被刺激到了，买买买买","text":"被刺激到了，买买买买 利好 写字楼在同一个园内 目前有5号线和7号线 未来规划会有15号线和**号线，其中有一条是去南山的 未来的西丽高铁站近在咫尺 政府负责招商引资，通常来说，不愁租不出去 附近的几个区域都在建写字楼 销售说，大疆在旁边买了块地(未确认), 如果是真，应该会是大疆的总部了 目前有南海大道和沙河西路可以去往科技园，销售说会有一条隧道穿到郎山区域(可信度蛮高) 房子是公寓房，不占用买房的限额。限贷不限购 房屋情况： 楼盘确实很火，需要尽快做决定 均价在6万-7万，目前来说，内侧西朝向的最值，目前剩下的最高楼24层 每层总价相差2000块 房间为双主卧，均有阳台，公共卫生间，厅很方正，阳台与厅等宽且方正，而且无窗户设计(个人非常喜欢) 32户8梯设计(可能有误)，电梯在两个拐角的位置. 万科物业 如果买的是内侧西朝向(高层影响采光会少点)，没有马路的噪音，窗外是凹进去的花园(高层可能视野会差点？) 明年9月底交房(按照喵的说法，本来是年中交房的，可能还会延误) 目前园区已经有两栋大户型交房，写字楼预计会在年中和年末分批交付 其他地皮有的在挖地基，有的还未开工，交付日期更晚 附近几公里都没有happy的商城 我的分析关于地铁 距离5号线和7号线确实还是有点远，目前有一点点是因为绕远的关系，也许等旁边的楼建好了会改善 地铁站如果稍远，可能会影响写字楼的招商引资，如果招商不顺利，我们就死定了 5号线和7号线去往的地方，比较大的站是深圳北和车公庙，我不觉得如果一个人会住在云城而坐地铁去上班(目前) 新建两条地铁，如果开建，肯定会影响附近的交通和市容，对租价不利，对房价有利 如果真的有去南山的地铁，那这片区域就活了 关于高铁站 喵很看好高铁站 我对于高铁站的看法不太关注。深圳北的房价涨，感觉与高铁站的关系不大，而是背靠福田和南山的关系。福田站同理。 高铁站对房价影响比较大的是往外流动的人多的地方，比如惠州，坪山 高铁站通常会成为一个室内交通枢纽，对房价有利 关于招商引资 深圳市政府做的事情都还蛮靠谱，像我家里那种地方，确实招商引资失败的事情蛮多，深圳还真没见过。包括坪山这种地方都能搞到电池行业 可对比的是南山智园，当时附近没有任何的科技行业，硬是建了一个写字楼群，目前还不错，进驻了艾默生(UPS龙头),深信服，以及一批创业公司。如果云城发展不顺利，最低也会是智园这样，进驻一些不想离开深圳市，又支付不起核心区域的大公司，以及一些创业团队。 跟南山科技园相隔的是松坪山区域，我去过源兴科技大厦。总体来说，园区很精致，肯定不如科技园火热。我猜主要原因是没有地铁。云城目前已经有两条地铁线了，更利好 如果去往南山的地铁开通，松坪山区域也会火起来，但是住宅相对较少，对云城利好(7年？) 万科租了旁边的波顿大厦，波顿大厦很豪华，楼下的车不多(也许地下停车场？)，快要下班的时候，旁边的mobike lite都被预约了 目前来说，人烟稀少，六车道的路都能用来练科目三了 关于租房 可以参照御锦公馆和理想公馆。精致程度跟御锦公馆类似，户型跟理想公馆很像。御锦公馆一点都不愁租，理想公馆不了解。 御锦公馆目前1室的房子租价4000+(30平+)，理想公馆去年小蓉蓉去看的时候是6000(？)，如果有机会，看看北京银行的楼开了之后的价格 如果按照招商引资的分析，云城的下限应该跟卓越城相当(我知道卓越城不愁租)，预估租价至少在8000。 如果我是一个创业公司的小高层，我应该不会跟人挤小房子。所以谁会花4000+去跟人合租呢？(阿达公司的CTO，租了小两室，其中一间给自己的猫住) 如果区域发展顺利，我们可以按照科技园的租价来参考。 关于增长空间 产权40年(来自喵，待确认) 增长空间不如住宅(来自喵)，我大概看了一下梅林的房价，御锦公馆确实跟一些旧一些的房子的房价旗鼓相当，因为御锦公馆是精装修，某种意义上也印证了这件事 在我看来，核心区域的一室和小两房一定是不愁租不愁卖的。在以后的大城市，极少人会选择在关内或者环内买婚房。在核心区域的购房更是奔着投资而去的。我相对来说更看好小户型。 实操以下按照买内西朝向24层估计 总价319万，3%的税 首付45%，约144万，如果我们四个人买，则36万/人 使用等额贷款，每月还贷约18k，4500/人。如果使用气球贷，每月还9800，2450/人，但是第十年最后一个月需还清(from 喵) 房子上最好只写一个人的名字，贷款也最好只由一个人贷。贷款人的流水应该是每月还贷额的2倍。 我们当然都不够，可能需要担保人或者联合借款人。写上去的人都会负债，会影响之后的买房 10年后我们的收入水平应该都不错，如果差别不大，选气球贷。当然等额贷款分拆下来也不高 按照目前借呗的费率，借36万一年需要付出利息25k的利息，粗略估算，只要从每平米61k涨到68k就能收回成本 交房后，每年租房的收入为96k 以上估计比较幼稚，买房的成本目前看来是税和家具，卖房的成本还不清楚。 终极问题36万好多，拿不出来怎么办贷款广告位招租","raw":null,"content":null,"categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://blog.0x01.site/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"我家的猫","slug":"我家的猫","date":"2017-02-08T12:40:10.000Z","updated":"2021-04-16T14:48:39.047Z","comments":true,"path":"2017/02/08/我家的猫/","link":"","permalink":"http://blog.0x01.site/2017/02/08/%E6%88%91%E5%AE%B6%E7%9A%84%E7%8C%AB/","excerpt":"回家过年期间，我家宝宝在医院过世了。从他生病开始，就一直想写篇文章给他，却拖到了现在。","text":"回家过年期间，我家宝宝在医院过世了。从他生病开始，就一直想写篇文章给他，却拖到了现在。 2015年冬天的时候，同事家的猫出生了。从来没想过要养宠物的我，实在是按捺不住，软磨硬泡的要来了一只，因为他们实在是太可爱了。快速的跟同事学习养猫经验，在一个周内买齐了装备，然后把两个月的宝宝接回了家。 我家确实好冷，小猫又特别怕冷，基本上他都是在我的膝盖和键盘上过的冬天。偶尔被我折腾的不耐烦，就跑到沙发上睡觉。晚上睡觉也是睡在我的胸口上。每个养猫的人可能都最怀念这段时期吧，好几次都想让他回炉重造呢。 后来他跟着我搬了两次家，在梅林住的地方有个大阳台，是他最喜欢的地方。晒太阳，吃草，捉虫子，像一只小野猫一样。天气已经不再冷了，他也不再粘我。我们像是老夫老妻，一起看电影，玩游戏，睡觉，但是不再黏在一起。这是我理想中的相处方式。 16年10月份这样子，宝宝开始拉在猫砂盆外面，有一天被我发现他排便很困难，于是带去医院。经过了x光，钡餐和彩超，最终确诊是肿瘤。 这在我看来就是胡扯淡。宝宝一直很健康，也很活泼，精神和身体看起来一点问题都没有，才一年大的猫，怎么身体里就有了肿瘤呢？ 宝宝最终是通过彩超确诊的。我开始向身边的人安利体检的时候一定要做彩超，也安利常见的癌症检查，因为身体看起来健康根本什么用都没有。 那个时候，我经常有种带着女儿去求医的感觉，请假的理由也都是家属生病。每个周都去医院带他做检查，吃医生推荐的罐头，尝试医生开的药。 对于我这种农村长大的孩子来说，为了一个宠物花那么多钱，是从来没想过的事情。在各种询问，甚至是争吵之后，我意识到，这是我这几年唯一会陪伴我的猫，也很有可能是我这辈子唯一的一只猫。于是不再犹豫。 一般来说，治疗癌症的过程是，穿刺取样-&gt;病理分析-&gt;开腹探查-&gt;肿瘤切除-&gt;病理分析，如果是恶性肿瘤，还要继续化疗。 我当时不想他太折腾，也是为了省钱，于是选择了直接开腹探查，如果可以切除肿瘤，就直接摘除。我后来简直悔断了肠子。 做手术的时候，医生把我叫进去，宝宝的肠子已经肿了很长的一段，无法全部切除。问我是否切除其中的一段，我选择是。 后来证明这两个选择都是错的。宝宝做手术前，只要吃药，就一切正常。如果不切除，应该会活很久吧。 病理分析的结果，怀疑是猫传染性腹膜炎。如果先穿刺取样，或者不直接切除，结果恐怕都不会那么糟。之前宝宝的妈妈家有一只猫被确诊猫传染性腹膜炎，他推荐我去打这种病的疫苗，我咨询了一下，没有去。虽然到现在我都不太相信有这种疫苗的存在，但是这也证明了我的侥幸心理，宝宝的去世，也是冥冥之中对我的报应吧。 宝宝刚做完手术的几天，带着肚子上的那么大的伤口，打点滴也依然需要两个护士才能胜任。有一个护士还跟我投诉说，他做完手术的第二天，就满地跑，需要各种围堵才能追到。还特别凶，在笼子里都要扑外面的护士。有一次我刚好遇到他们打点滴，宝宝在地上特别凶的在叫。我心里沾沾自喜，瞧宝宝这身体，虽然有肿瘤，但是肯定会熬过去的。 宝宝手术之后，住在医院大约2个星期。住院的后期，他开始对我的探望不再兴奋，出院的时候，貌似脾气都磨没了。现在想想，那个时候的身体已经不可同日而语了。 回到家之后，他依然会拉在猫砂盆外面，也不再活泼，整天很安静的待着。宝宝过去被所有过来看他的人投诉脾气暴躁，住院回来温柔了好多，我以为这是成年猫的通病–高冷。 他依然只能吃罐头，而且食量严重下降。我每天进门和起床之后，都是先在地上捡屎，然后热罐头，磨药。天也开始冷了，他开始钻被窝，跟我在一起的时候，基本也都是趴在被子上。 每次进门的时候，他总是对我喵喵叫，并且在地上打滚，我都要把他抱起来在房间里走一圈，直到他挣脱为之。他喜欢趴在我的胸口上，我趟在床上，总是要多玩一会游戏或者手机，因为他趴在我胸口上，真的好暖。 海兵跟我说，久病床前无孝子。每天都要捡屎的我开始厌烦(这里推荐厨房湿巾，大块好用)，在他的躺着的毛巾上开始发现便便的痕迹，直到后来，我开始在我的被子上也发现便便的印记。 小容容说很佩服我能坚持捡屎这么久。其实也没什么，我只是觉得这是我应该做的，必须做的，机械的执行下去就是了。地板脏了，洗；毛巾脏了，洗；被子脏了，洗。无非多付出点功夫，又不会死人。抱怨、难过的情绪当然一直都有。 过年回家的时候，我把他寄养在了瑞鹏。山东长大的孩子很奇怪，从来都没想过，过年可以不回家这种事情。我从头到尾一直在想的是在哪里寄养的问题，即使我已经领教过一次，我不在面前他就不吃饭的事情。 其实宝宝去世这件事，我很早就已经准备好了，只是早晚而已。但是我无法接受他这种离开，我以为他会在我的怀里安稳的睡着不再醒来。在一个陌生的地方去世，像是被遗弃了一样。我一直想对他大喊：宝宝，我一定会回去接你的啊。 海兵在深圳帮我处理好了所有事情，我回来的时候，什么都不用面对。感觉就像宝宝只是离开了我，去了别人怀里一样。这感觉像是分手，幻想的未来每一刻都有他，可是他却离开了你，你依然要经历那些你幻想的事，只是这些经历都再也没有他了。 我不相信有鬼神。我只希望宝宝在去世的那一刻，能够相信我还是爱他的，我一直都在回到他身边的路上。 宝宝走了很久很久之后，我在半夜中迷迷糊糊的时候，胸口还是会有被压住的感觉，伸手去抱，才发现空空如也。 2017更新: 我终于接受了新的猫加入我的家庭。","raw":null,"content":null,"categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://blog.0x01.site/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"MongoDB的Replica Set以及Auth的配置","slug":"MongoDB的Replica-Set以及Auth的配置","date":"2017-01-12T16:08:50.000Z","updated":"2021-04-16T14:48:39.043Z","comments":true,"path":"2017/01/13/MongoDB的Replica-Set以及Auth的配置/","link":"","permalink":"http://blog.0x01.site/2017/01/13/MongoDB%E7%9A%84Replica-Set%E4%BB%A5%E5%8F%8AAuth%E7%9A%84%E9%85%8D%E7%BD%AE/","excerpt":"MongoDB事件出现后，公司要给MongoDB加Auth，于是我就调研了一番。","text":"MongoDB事件出现后，公司要给MongoDB加Auth，于是我就调研了一番。 现在MongoDB在生产中一般使用Replica Set的方式部署，如果一台宕机，另外一台Secondary会变成Master继续服务，提高可用性。 使用docker搭个集群测试，首先建个network bridge 1docker network new mongo-network 然后就是运行MongoDB的容器，集群名为test-rep 123docker run --rm -it --name mongo1 --net=mongo-network mongo --replSet test-repdocker run --rm -it --name mongo2 --net=mongo-network mongo --replSet test-repdocker run --rm -it --name mongo3 --net=mongo-network mongo --replSet test-rep 然后再运行一个连接到上述三个MongoDB的容器 1docker run --rm -it --name mongo-client --net=mongo-network mongo /bin/bash 然后在容器中执行 1mongo --host mongo1 发现连接上了，说明MongoDB的配置没有问题，然后是配置Replica Set。Replica Set要求配置的members中不能有localhost，而我配置为mongo2，mongo3这种一直都报类似的错误，我索性找出了几个容器的IP，配置上去 1docker network inspect mongo-network 可以看到几个容器的IP 然后就可以使用IP地址配置了 12config = &#123;_id:&quot;test-rep&quot;, version:1, members:[&#123;_id:0, host:&quot;172.19.0.5:27017&quot;, priority:5&#125;, &#123;_id:1, host:&quot;172.19.0.3:27017&quot;, priority:2&#125;, &#123;_id:2, host:&quot;172.19.0.4:27017&quot;, priority:3&#125;]&#125;rs.initiate(config) 再去看mongod的log，发现集群同步成功 把mongo1停掉，mongo2会成为primary 然后按照MongoDB的文档增加用户 1234567db.createUser(&#123;user: &quot;admin&quot;,pwd: &quot;admin&quot;,roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]&#125;) 重启mongod的进程，增加–auth参数，表示启用权限校验 123docker run --rm -it --name mongo1 --net=mongo-network mongo --replSet test-rep --authdocker run --rm -it --name mongo2 --net=mongo-network mongo --replSet test-rep --authdocker run --rm -it --name mongo3 --net=mongo-network mongo --replSet test-rep --auth 发现一直报Error in heartbeat request to 172.19.0.5:27017; Unauthorized: not authorized on admin to execute command的错误，查了很久，发现Replica Set要使用keyFile的校验方式，让集群的member之间同步，也就是说，通过keyFile获得__system用户在local上的权限。local存放着Replica Set的配置和同步信息。MongoDB官方推荐的keyFile的生产方式 12openssl rand -base64 756 &gt; &lt;path-to-keyfile&gt;chmod 400 &lt;path-to-keyfile&gt; 先结束掉mongod的进程，因为要放入keyFile，于是我启动docker的时候，默认不启动mongod 1docker run --rm -it --name mongo1 --net=mongo-network mongo /bin/bash 容器里没有装openssl，我偷懒使用了以下命令 12echo &#x27;I8au1RERvEQkIiIB7vhTMhfceA8oH/L0mT6xxeVgaJg/mYnnZe89dGWjMrQSXI7A&#x27; &gt; /data/key_filechmod 400 /data/key_file 然后启动mongod进程 1mongod --replSet test-rep --auth --keyFile=/data/key_file 在mongo2，mongo3上按照上述命令，依次启动。发现漂亮的同步成功的标志 收工 生产上的MongoDB，切换到需要Auth，是否可以在不停机的状况下进行呢？ 某同学猜想，mongod不采用Auth的时候，客户端使用密码，可不可以呢？Python连接MongoDB的代码很简单 pymongo.MongoClient(&apos;mongodb://user:user1@mongo1:27017,mongo2:27017,mongo3:27017/mydb?authMechanism=SCRAM-SHA-1&apos;) 访问mydb的时候，直接就抛Authentication failed错误了。如果我先添加了user呢？在mongo shell中执行 12345678db.createUser(&#123;user: &quot;user&quot;,pwd: &quot;user1&quot;,roles: [ &#123; role: &quot;readWrite&quot;, db: &quot;mydb&quot; &#125;, &#123; role: &quot;readWrite&quot;, db: &quot;mydb2&quot; &#125; ]&#125;) 刚刚的admin，只是访问admin库的用户名和密码，可以管理用户信息，user用户可以用来读写相应的库。此时，mongod依然没有使用--auth启动，因此是没有权限检查的，再次连接，一切正常。 因此配置步骤如下 创建MongoDB用户 1234567891011121314151617181920use admindb.createUser(&#123;user: &quot;admin&quot;,pwd: &quot;admin&quot;,roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125;,&#123; role: &quot;clusterAdmin&quot;, db: &quot;admin&quot; &#125;, ]&#125;)use mydbdb.createUser(&#123;user: &quot;user&quot;,pwd: &quot;user1&quot;,roles: [ &#123; role: &quot;dbOwner&quot;, db: &quot;mydb&quot; &#125;, &#123; role: &quot;dbOwner&quot;, db: &quot;mydb2&quot; &#125; ]&#125;) 修改应用，更改MongoDB的URI 1pymongo.MongoClient(&#x27;mongodb://user:user1@mongo1:27017,mongo2:27017,mongo3:27017/mydb?authMechanism=SCRAM-SHA-1&#x27;) mongod增加keyFile 12openssl rand -base64 756 &gt; /data/key_filechmod 400 /data/key_file 把key_file上传到其他mongod服务器上，修改mongod配置，一般是/etc/mongodb.conf 123security:authorization: enabledkeyFile: /data/key_file 然后同时重启三台mongod 这样只有重启的那一刹那不可用","raw":null,"content":null,"categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"http://blog.0x01.site/tags/%E8%BF%90%E7%BB%B4/"},{"name":"Python","slug":"Python","permalink":"http://blog.0x01.site/tags/Python/"}]},{"title":"Python使用datetime报AttributeErrors的解决办法","slug":"Python使用datetime报AttributeErrors的解决办法","date":"2016-12-16T15:44:54.000Z","updated":"2021-04-16T14:48:39.043Z","comments":true,"path":"2016/12/16/Python使用datetime报AttributeErrors的解决办法/","link":"","permalink":"http://blog.0x01.site/2016/12/16/Python%E4%BD%BF%E7%94%A8datetime%E6%8A%A5AttributeErrors%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"最近写了一个多线程写数据的脚本，其中使用datetime.strptime的时候，报了一个AttributeError: _strptime_time的错误。","text":"最近写了一个多线程写数据的脚本，其中使用datetime.strptime的时候，报了一个AttributeError: _strptime_time的错误。 对于这个错误，本地无论如何都不能重现，百思不得其解。经过小容容的指点，发现了原来datetime.strptime线程不安全，文章在此 这个错误很容易复现，多线程中只调用datetime.strptime，错误是必现的。代码如下(原谅我懒，直接借用了别人的代码) 1234567891011import timeimport threaddef f():for m in xrange(1, 13):for d in xrange(1,29): time.strptime(&quot;2010%02d%02d&quot;%(m,d),&quot;%Y%m%d&quot;)for _ in xrange(10):thread.start_new_thread(f, ())time.sleep(3) datetime.strptime是基于time.strptime的，代码中就都使用time.strptime来代替。解决的办法也很简单，在线程外先使用一次datetime.strptime，或者import _strptime 123456789101112import timeimport threadimport _strptimedef f():for m in xrange(1, 13):for d in xrange(1,29): time.strptime(&quot;2010%02d%02d&quot;%(m,d),&quot;%Y%m%d&quot;)for _ in xrange(10):thread.start_new_thread(f, ())time.sleep(3) 代码跟过去，发现_strptime这个module里，有几个可疑的地方。一是定义了几个全局变量，第一个是线程锁，一个是正则的缓存 12_cache_lock = _thread_allocate_lock()_TimeRE_cache = TimeRE() 而_strptime函数内部，首先就用到了这两个变量 1234global _TimeRE_cache, _regex_cachewith _cache_lock: if _getlang() != _TimeRE_cache.locale_time.lang: pass 我怀疑是多线程使用_strptime的时候，初始化撞在了一起，产生了两个线程锁，而后面的操作，又是线程不安全的。这次就不讨论了。 让我大跌眼镜的是，__builtin__的一个使用很普遍的function，竟然是线程不安全的。","raw":null,"content":null,"categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.0x01.site/tags/Python/"}]},{"title":"从SQLAlchemy的ObjectDeletedError到SQLAlchemy的对象刷新机制","slug":"从SQLAlchemy的ObjectDeletedError到SQLAlchemy的对象刷新机制","date":"2016-10-25T15:14:51.000Z","updated":"2021-04-16T14:48:39.044Z","comments":true,"path":"2016/10/25/从SQLAlchemy的ObjectDeletedError到SQLAlchemy的对象刷新机制/","link":"","permalink":"http://blog.0x01.site/2016/10/25/%E4%BB%8ESQLAlchemy%E7%9A%84ObjectDeletedError%E5%88%B0SQLAlchemy%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%88%B7%E6%96%B0%E6%9C%BA%E5%88%B6/","excerpt":"我们的系统使用的是Flask+SQLAlchemy，为了使用MySQL主从，我们使用了数据库代理。自此，ObjectDeletedError开始越来越多。","text":"我们的系统使用的是Flask+SQLAlchemy，为了使用MySQL主从，我们使用了数据库代理。自此，ObjectDeletedError开始越来越多。 假设现在我们定义了一个model对象Staff，我们取出两个对象 s1 = Staff.query.get(1) 现在我们把s1从数据库直接删掉，然后执行 db.session.commit() # db是连接数据库的对象 再在命令行里引用s1，就会报ObjectDeletedError。 那SQLAlchemy是怎么判定什么时候会去重新取这个对象呢？ 我们继续上述操作 s1 = Staff.query.get(1) s2 = Staff.query.get(2) db.session.commit() 如果我们打开数据库的log，会发现，引用s1对象会重新去数据库里查询。我们保留了s2对象，查看一下s2对象有什么问题。 dir(s2) 有个_sa_instance_state很可疑，然后我们继续查看 dir(s2._sa_instance_state) 发现有个expired属性，查看了一下，果然是True。表示这个对象已经过期了。其中s2._sa_instance_state._expire 是个对象，里面应该有对象过期的机制，我猜是SQLAlchemy在内存里包含了一个版本，commit了之后，会将落后的版本设置为过期。 因此可以判定，当创建一个对象，commit了之后，创建的时候init的对象已经过期，会重新去数据库取，读取的请求落到了从库，有一定概率，从库并未同步过来，返回NULL，也就导致了ObjectDeletedError错误 怎么解决这个问题呢？ db = SQLAlchemy(session_options=&#123;&apos;expire_on_commit&apos;: False&#125;) 在实例化db对象的时候，传入expire_on_commit=False，这样就可以让内存中的对象不过期，就可以防止ObjectDeletedError了。 虽然会在某些情境下导致数据不一致，但是这样更符合直觉，毕竟，取出的对象，就保持他取出来的时候的样子就行，如果我想要此时此刻最新的，重新query一次好咯。 感谢小容容，老司机","raw":null,"content":null,"categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.0x01.site/tags/Python/"},{"name":"数据库","slug":"数据库","permalink":"http://blog.0x01.site/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"运维中的一些常见命令","slug":"运维中的一些常见命令","date":"2016-08-10T15:48:02.000Z","updated":"2021-04-16T14:48:39.047Z","comments":true,"path":"2016/08/10/运维中的一些常见命令/","link":"","permalink":"http://blog.0x01.site/2016/08/10/%E8%BF%90%E7%BB%B4%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/","excerpt":"最近搞运维搞的比较多，于是乎积攒了很多shell命令，很多都很初级，只是给自己一个备忘。","text":"最近搞运维搞的比较多，于是乎积攒了很多shell命令，很多都很初级，只是给自己一个备忘。 查看想要的进程 ps aux | grep python 杀死查出的进程 pgrep python | xargs kill -2 查看进程的持续时间 ps -eo lstart # 开始时间 ps -eo etime # 持续时间 查看端口占用 netstat -anp | grep 6379 总和 netstat -anp | grep 6379 | wc -l 假设你的进程如图所示 那么可以用下面的命令来查看每个进程占用的连接 netstat -anp | grep 6379 | awk &apos;&#123;print $7&#125;&apos; | awk -F &apos;[/]&apos; &apos;&#123;print $1&#125;&apos; | sort | uniq -c print $7是拿出进程的那一列， -F是分割，sort是排序，uniq -c 相当于group by awk 真是神器，支持格式化输出，比如用在删除远程分支上时。awk里的/origin/去掉也行，不知道放在这里干嘛的 git br -r | grep &apos;origin/&apos; | grep -v &apos;master&apos; | awk -F &apos;[/]&apos; &apos;/origin/ &#123;printf &quot;:%s\\n&quot;, $2&#125;&apos; | xargs git push origin 删除本地分支 git br --merged master | grep -v master | xargs git branch -D 删除python的缓存文件(找出文件夹下的某种特征的文件并删除) 1find . -name &#x27;*.pyc&#x27; -type f -print -exec rm -rf &#123;&#125; \\; 统计各个IP的time_wait netstat -n|grep CLOSE_WAIT|awk &apos;&#123;print $5&#125;&apos;|sort |uniq -c |sort -rn |head -n20 查看链接的状况，分类count netstat -n|grep 80 | awk &apos;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&apos; 数据库快速杀死正在进行的查询 select concat(&apos;KILL &apos;,id,&apos;;&apos;) from information_schema.processlist where user=&apos;root&apos;; select concat(&apos;KILL &apos;,id,&apos;;&apos;) from information_schema.processlist where user=&apos;root&apos; and info like &apos;select %&apos;; #只有查询语句 然后把结果复制下来，再copy进去即可 查看数据库中正在进行的查询，以及持续时间 select * from information_schema.processlist where `command` != &apos;sleep&apos;; 查看数据库中的大表 select * from information_schema.tables order by DATA_LENGTH DESC limit 10; 或者小优化版 SELECT concat( table_schema, &apos;.&apos;, table_name ) table_name, concat( round( data_length / ( 1024 *1024 ) , 2 ) , &apos;M&apos; ) data_length, concat( round( index_length / ( 1024 *1024 ) , 2 ) , &apos;M&apos; ) index_length, concat( round( round( data_length + index_length ) / ( 1024 *1024 ) , 2 ) , &apos;M&apos; ) total_size FROM information_schema.TABLES ORDER BY data_length DESC limit 10; 在线修改Mysql表结构,需要(pt-online-schema-change)[https://www.percona.com/doc/percona-toolkit/2.1/pt-online-schema-change.html#dsn-options] 1pt-online-schema-change --execute -h 127.0.0.1 -u root --ask-pass --alter=&quot;add column status tinyint(4) after id&quot; D=test_db,t=test_table 给用户加组，常见的是加docker组 1usermod -a -G docker cnzhx 找出大文件夹 1du -h --max-depth=1 / 以后慢慢补充","raw":null,"content":null,"categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"http://blog.0x01.site/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"使用docker配置sentry","slug":"使用docker配置sentry","date":"2016-08-10T14:54:46.000Z","updated":"2021-04-16T14:48:39.044Z","comments":true,"path":"2016/08/10/使用docker配置sentry/","link":"","permalink":"http://blog.0x01.site/2016/08/10/%E4%BD%BF%E7%94%A8docker%E9%85%8D%E7%BD%AEsentry/","excerpt":"最近sentry需要迁移服务器，偶然发现使用docker部署sentry更方便，日后维护起来也更容易。","text":"最近sentry需要迁移服务器，偶然发现使用docker部署sentry更方便，日后维护起来也更容易。 基本就是按照官方的操作 启动一个redis docker run -d --name sentry-redis redis 启动一个postgres,使用了默认密码。。如果想要更改数据的存储位置，可以加上 -v /data/postgres:/var/lib/postgresql/data docker run -d --name sentry-postgres -e POSTGRES_PASSWORD=secret -e POSTGRES_USER=sentry postgres 建表，更新初始数据, 生成一个secret key，因为postgres使用的是默认密码，所以这里不用传 postgres的密码，这里注意postgres和redis的名称对应 docker run -it --rm -e SENTRY_SECRET_KEY=&apos;&lt;secret-key&gt;&apos; --link sentry-postgres:postgres --link sentry-redis:redis sentry upgrade 启动sentry，这里我也传了email的配置，结果总是发邮件超时。这里我把docker中的9000端口映射到了宿主的9000端口 docker run -d --name my-sentry -e SENTRY_SECRET_KEY=&apos;&lt;secret-key&gt;&apos; --link sentry-redis:redis --link sentry-postgres:postgres -p 9000:9000 sentry 启动sentry的cron 和 celery worker docker run -d --name sentry-cron -e SENTRY_SECRET_KEY=&apos;&lt;secret-key&gt;&apos; --link sentry-postgres:postgres --link sentry-redis:redis sentry run cron docker run -d --name sentry-worker-1 -e SENTRY_SECRET_KEY=&apos;&lt;secret-key&gt;&apos; --link sentry-postgres:postgres --link sentry-redis:redis sentry run worker -c 4 celery worker可以传入 CELERYD_MAX_TASKS_PER_CHILD,CELERYD_TASK_SOFT_TIME_LIMIT,CELERYD_PREFETCH_MULTIPLIER等等环境变量用来优化celery(还未测试是否会生效) 如果要重启某个服务 docker restart &lt;docker name&gt; 如果要查询数据 docker run -it --rm --link sentry-redis:redis redis redis-cli -h redis docker run -it --rm --link sentry-postgres:postgres postgres psql -U sentry -d sentry -h postgres -p docker把很多服务都封装的很好，不用考虑具体实现，真是吾等福音。","raw":null,"content":null,"categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"http://blog.0x01.site/tags/%E8%BF%90%E7%BB%B4/"},{"name":"Docker","slug":"Docker","permalink":"http://blog.0x01.site/tags/Docker/"}]},{"title":"如何从零开始架设一个网站","slug":"如何从零开始架设一个网站","date":"2016-02-03T17:16:22.000Z","updated":"2021-04-16T14:48:39.045Z","comments":true,"path":"2016/02/04/如何从零开始架设一个网站/","link":"","permalink":"http://blog.0x01.site/2016/02/04/%E5%A6%82%E4%BD%95%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%9E%B6%E8%AE%BE%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99/","excerpt":"从开发一个最简单的server，到用supervisor部署，然后配置nginx，到绑定域名到主机。","text":"从开发一个最简单的server，到用supervisor部署，然后配置nginx，到绑定域名到主机。 使用flask开发一个最简单的serverflask使用起来非常简单，几行代码就能写好一个server。新建一个文件，命名为app.py，键入以下命令 12345678910111213#! coding=utf-8from flask import Flaskapp = Flask(__name__)@app.route(&#x27;/&#x27;)def index(): return &quot;&lt;p&gt;this is my server&lt;/p&gt;&quot;if __name__ == &#x27;__main__&#x27;: app.run(&quot;0.0.0.0&quot;) 执行python app.py, 打开浏览器，输入localhost:5000，如果看到this is my server，就表示我们的server运行起来了。(如果不成功，就先执行pip install flask) 只是一个web应用，想要成为一个server，这里使用gunicorn作为中间层在本目录下新建一个文件wsgi.py，代码如下： 123456#! coding: utf-8from werkzeug.contrib.fixers import ProxyFixfrom app import appapp.wsgi_app = ProxyFix(app.wsgi_app) ProxyFix主要为了取得真实的IP，这里可以不理此时执行以下命令 gunicorn -w 4 -b 127.0.0.1:4000 wsgi:app (需要安装 gunicorn 等)-w 4是运行4个worker，也可以加-k gevent，运行无阻塞的server。此时再访问浏览器，如果正常，则说明我们已经写好了一个server 使用supervisor守护进程supervisor的安装就不再详述了。在/etc/supervisord.d/ 下新建一个little_server.ini, 代码如下：（我把代码放到服务器的/var/www文件夹下, 服务器的Python环境应该用virtualenv） [program:little_server] command=gunicorn -w 4 wsgi:app -b 0.0.0.0:5000 directory=/var/www/little_server autostart=true autorestart=true stopsignal=QUIT user=ubuntu stdout-logfile=/var/log/little_server_stdout.log stderr-logfile=/var/log/little_server_stderr.log 如果没有这个文件夹，那就需要初始化supervisoruser换成服务器的真实用户名，stdout是系统输出日志，err则是报错信息(log信息也会到这里面来) 执行supervisor -c /etc/supervisor.conf reload, 如果没有报错，则说明server正在运行 访问服务器的ip加端口号5000加以验证 绑定域名域名的绑定服务提供商很多，购买域名的地方通常会提供方便的方法。这里我用的是Dnspod按照指示，到购买域名的地方，把name server指向Dnspod到Dnspod，增加域名解析，记录值填上服务器的ip地址，大概是这样的 主机记录指的是域名前的字符串，比如www.example.com@ 指的是域名example.com 则是泛指的域名 绑定结束之后，等待一两天即可生效 使用nginx做服务器代理浏览器默认访问80端口，可是服务器的80端口就一个，这就需要我们把其他端口上的web应用，代理到80端口上nginx的安装在这里也不赘述，配置文件放在/etc/nginx/site-available/下。每次创建一个配置，都要在site-enable下创建一个软连接 首先 sudo service nginx start，然后访问服务器的ip，看到了nginx的欢迎页，说明成功了。 拷贝一份default，命名为little_server（或者干脆新建一个，干净清爽），输入以下配置 12345678910111213server &#123; listen 80; server_name 0x01.pw www.0x01.pw; location / &#123; proxy_pass http://127.0.0.1:5000/; proxy_read_timeout 120; proxy_redirect off; proxy_set_header Host $http_host; access_log /var/log/nginx/little-server.log; error_log /var/log/nginx/little-error.log; &#125;&#125; 这里省略了很多的http header 的转发执行 sudo nginx -t &amp;&amp; service nginx reload, 这个是安全启动，如果测试不通过，不会reload。 当访问自己的域名，看到网页上呈现自己的内容，那种成就感真是无与伦比。这个教程只是实现一个最简单的server，省略了很多可以优化的配置，还需要在长期的运维时，不停的改进。","raw":null,"content":null,"categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"http://blog.0x01.site/tags/%E8%BF%90%E7%BB%B4/"},{"name":"Python","slug":"Python","permalink":"http://blog.0x01.site/tags/Python/"}]},{"title":"Python如何在函数内获取调用者信息","slug":"Python如何在函数内获取调用者信息","date":"2016-02-03T16:00:44.000Z","updated":"2021-04-16T14:48:39.044Z","comments":true,"path":"2016/02/04/Python如何在函数内获取调用者信息/","link":"","permalink":"http://blog.0x01.site/2016/02/04/Python%E5%A6%82%E4%BD%95%E5%9C%A8%E5%87%BD%E6%95%B0%E5%86%85%E8%8E%B7%E5%8F%96%E8%B0%83%E7%94%A8%E8%80%85%E4%BF%A1%E6%81%AF/","excerpt":"写了一个公用的生成Excel的函数，如何根据调用者不同，生成不同名字的文件呢？当然最好的办法还是显式的传入函数","text":"写了一个公用的生成Excel的函数，如何根据调用者不同，生成不同名字的文件呢？当然最好的办法还是显式的传入函数 函数的调用其实是一个堆栈，可以用traceback的extract_stack或者print_stack方法去查看 1234567891011121314import tracebackdef func(x): print &quot;result: %s&quot; % x print traceback.extract_stack() def func1(x): func(x)def func2(x): func1(x)if __name__ == &#x27;__main__&#x27;: func2(90) 以上会输出 [(&apos;traceback_p.py&apos;, 18, &apos;&lt;module&gt;&apos;, &apos;func2(90)&apos;), (&apos;traceback_p.py&apos;, 14, &apos;func2&apos;, &apos;func1(x)&apos;), (&apos;traceback_p.py&apos;, 10, &apos;func1&apos;, &apos;func(x)&apos;), (&apos;traceback_p.py&apos;, 6, &apos;func&apos;, &apos;print traceback.extract_stack()&apos;)] 可以看出列表每个元素分别是文件名，行数，函数名，调用方式，而且顺序恰好是堆栈的底到顶端我们修改一下代码，就可以知道当前的函数名，以及调用者的函数名称了。 1234567891011121314151617181920212223242526272829import tracebackdef func(x): print &quot;result: %s&quot; % x stack = traceback.extract_stack() print &quot;where i am&quot; item = stack[-1] print &quot;which file: %s&quot; % item[0] print &quot;line: %s&quot; % item[1] print &quot;function name: %s&quot; % item[2] print &quot;how call: %s&quot; % item[3] print &quot;\\n&quot; print &quot;where call the function&quot; item = stack[-1] print &quot;which file: %s&quot; % item[0] print &quot;line: %s&quot; % item[1] print &quot;function name: %s&quot; % item[2] print &quot;how call: %s&quot; % item[3]def func1(x): func(x)def func2(x): func1(x)if __name__ == &#x27;__main__&#x27;: func2(90) 结果如下： result: 90 where i am which file: traceback_p.py line: 5 function name: func how call: stack = traceback.extract_stack() where call the function which file: traceback_p.py line: 5 function name: func how call: stack = traceback.extract_stack()","raw":null,"content":null,"categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.0x01.site/tags/Python/"}]},{"title":"Apple time machine的一点随想","slug":"apple-time-machine的一点随想","date":"2015-12-27T11:44:43.000Z","updated":"2021-04-16T14:48:39.044Z","comments":true,"path":"2015/12/27/apple-time-machine的一点随想/","link":"","permalink":"http://blog.0x01.site/2015/12/27/apple-time-machine%E7%9A%84%E4%B8%80%E7%82%B9%E9%9A%8F%E6%83%B3/","excerpt":"我用自己的Macbook air换了友人的Macbook pro，除了电脑的重量和屏幕大小，我们再也没有觉得哪里有变过。","text":"我用自己的Macbook air换了友人的Macbook pro，除了电脑的重量和屏幕大小，我们再也没有觉得哪里有变过。 之前用time machine，其一是防止修改了文件再找回来：它提供了最近24个小时内的每个小时的备份，实在是不能再贴心。其二就是为了防止电脑坏了或者丢了之后，数据全部都没了。 但是直到最近这次换电脑，我才真正感受到了time machine的魅力。 开机按住command + r，选择从time machine启动，等待半小时，电脑呈现的正是我关闭电脑前的样子。全部的应用都在，应用也不用重新授权，应用的配置也都不变。 更重要的是，ssh key不变，系统的包，python的依赖也都不变，对于一个程序员来说，简直想哭有没有！ 这种不出彩的，不会拿来当卖点的功能也能做的如此之好，真是让人敬佩。 后来发现高兴的太早，还是有一些问题的。mysql的执行目录是权限的，以及mysql的历史数据有损失，因此mysql server一直运行不起来。把pid和sock，甚至是data都指向/tmp，算是搞定了。 当然后面我又全部删掉重装了。","raw":null,"content":null,"categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"http://blog.0x01.site/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"如何一键建立v p N","slug":"如何一键建立vpn","date":"2015-12-27T11:34:15.000Z","updated":"2021-04-16T14:48:39.045Z","comments":true,"path":"2015/12/27/如何一键建立vpn/","link":"","permalink":"http://blog.0x01.site/2015/12/27/%E5%A6%82%E4%BD%95%E4%B8%80%E9%94%AE%E5%BB%BA%E7%AB%8Bvpn/","excerpt":"之前配过pptp, 一直都不成功。左耳朵耗子分享了一个docker镜像，可以直接pull下来，就可以一键搭v p N","text":"之前配过pptp, 一直都不成功。左耳朵耗子分享了一个docker镜像，可以直接pull下来，就可以一键搭v p N 首先，找一台国外的VPS，装个最新版的Ubuntu/CentOS，然后执行： docker run -d -p 500:500/udp -p 4500:4500/udp -p 1701:1701/tcp -e PSK=共享密码 -e USERNAME=用户名 -e PASSWORD=密码 siomiz/softethervpn （完）","raw":null,"content":null,"categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"http://blog.0x01.site/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"这一年即将过去","slug":"这一年即将过去","date":"2015-12-03T01:20:12.000Z","updated":"2021-04-16T14:48:39.048Z","comments":true,"path":"2015/12/03/这一年即将过去/","link":"","permalink":"http://blog.0x01.site/2015/12/03/%E8%BF%99%E4%B8%80%E5%B9%B4%E5%8D%B3%E5%B0%86%E8%BF%87%E5%8E%BB/","excerpt":"\n这一年即将过去，感觉自己什么都没有积累，感觉好恐怖\n\n昨晚跟一个朋友聊了好久，发现这一年下来，我没有除了工作之外，没有任何的成长，还一点钱都没有攒。","text":"这一年即将过去，感觉自己什么都没有积累，感觉好恐怖 昨晚跟一个朋友聊了好久，发现这一年下来，我没有除了工作之外，没有任何的成长，还一点钱都没有攒。 我要在年前做到： 每周3篇博客 每天都不赖床 每天跳健身操 写一个抓取机票价格的爬虫，并且部署到服务器上 FIFA足球经理玩完一个赛季，最好能夺冠 每两个周至少读一本书，并且写读书笔记 写一个展示数据的页面，年前要搭起来","raw":null,"content":null,"categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://blog.0x01.site/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"如何拥有一台远程服务器","slug":"如何拥有一台远程服务器","date":"2015-09-29T08:28:53.000Z","updated":"2021-04-16T14:48:39.046Z","comments":true,"path":"2015/09/29/如何拥有一台远程服务器/","link":"","permalink":"http://blog.0x01.site/2015/09/29/%E5%A6%82%E4%BD%95%E6%8B%A5%E6%9C%89%E4%B8%80%E5%8F%B0%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"\n这是给我的小白朋友们的教程\n\n我在香港买了一台服务器，需要把他们的ssh key加入我的服务器里来，然后才能继续翻墙的教程。通常他们都没有生成过，因此就从头开始。","text":"这是给我的小白朋友们的教程 我在香港买了一台服务器，需要把他们的ssh key加入我的服务器里来，然后才能继续翻墙的教程。通常他们都没有生成过，因此就从头开始。 首先打开终端，或者在Spotlight里输入terminal, 打开终端然后在终端中输入以下命令 cd ~/.ssh ls 查看输出中是否有id_rsa之类的文件，如果有，则跳过。（当然最好是截图给你那亲爱的程序员同学啦）如果没有，则需要生成，继续下面的命令 ssh-keygen 有任何提示，一路回车即可，注意看，如果要填写邮箱，可以填上自己的邮箱。不出意外，ssh key已经生成然后继续输入下面的命令 cat ~/.ssh/id_rsa.pub 复制出现的信息（你的公钥），打开微信，粘贴发给程序员同学。 程序员同学加好公钥之后，会发过来一个config文件，(此时确保你没有关闭过终端，否则需要执行一开始的那个命令cd ~/.ssh) ls 看看有没有config文件，没有的话就新建 touch config 输入命令 pwd 然后会显示当前的路径，复制，打开finder，点击前往-前往文件夹，粘帖刚才复制的路径，回车看到config文件，右击，使用文本文档打开，把程序员同学发过来的config信息粘帖进去。如果不出意外，就已经完成了。仔细看程序员同学发过来的信息，大概类似于 Host hk User root Port 22 Hostname 102.102.102.102 IdentityFile ~/.ssh/id_rsa Host后面的就是主机名称，比如这个信息里就是hk，为了测试一下是否成功，输入以下命令 ssh hk 有提示，输入yes，回车。如果没有报错的信息，而且得到一个不同的终端，就可以继续下一篇教程（如何利用一台远程服务器快速的科学上网）了。","raw":null,"content":null,"categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"http://blog.0x01.site/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"如何利用一台远程服务器快速的科学上网","slug":"如何利用一台远程服务器快速的科学上网","date":"2015-09-09T11:03:43.000Z","updated":"2021-04-16T14:48:39.046Z","comments":true,"path":"2015/09/09/如何利用一台远程服务器快速的科学上网/","link":"","permalink":"http://blog.0x01.site/2015/09/09/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E4%B8%80%E5%8F%B0%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BF%AB%E9%80%9F%E7%9A%84%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/","excerpt":"\n前提当然是你要有一台位于国外的，国内能访问的服务器\n\n作为一个程序员，应该自带翻*墙属性，其一是安装的包的源都在国外，其二是代码托管通常都是github，bitbucket之类的网站，其三是各种资料还是国外的靠谱一些。","text":"前提当然是你要有一台位于国外的，国内能访问的服务器 作为一个程序员，应该自带翻*墙属性，其一是安装的包的源都在国外，其二是代码托管通常都是github，bitbucket之类的网站，其三是各种资料还是国外的靠谱一些。 之前本着不折腾的原则，我尽量都是使用第三方的服务，比如红杏，比如shadowsocks。首先是用起来确实很稳定，很爽，其二就是他们的口碑都不错，花钱了就更安心了。但是最近红杏完全倒下，shadowsocks的项目也被关闭，如果日后再被屏蔽，恐怕开源社区也难以跟上了，因为少了中心结点，找到新的更新难度也会加大，不排除大陆会完全屏蔽github的可能性。因此自己研究一下翻wall(墙)还是很有必要的。以前经常被搭梯子的名词给吓到，比如代理，反向代理诸如此类，而我到现在都不会配置Nginx。但是最近同事教了一个超级方便的方法。 首先你需要可以ssh到那台可以自由访问的服务器，如果不知道ssh，请自行百度。然后输入以下命令 ssh -i &lt;id_rsa_file&gt; -D &lt;port&gt; &lt;user&gt;@&lt;remote_ip&gt; id_rsa_file是登陆远程服务器的证书，port就是本地监听端口, remote_ip是远程服务器的IP地址，user是登陆到这台服务器的用户名。如果是设置的自己的私钥，通常可以改一下config，方便下次登陆。比如我放在远程服务器的公钥是id_rsa.pub,那么我可以修改 ~/.ssh/config , 如果没有，就新建一个。在里面输入内容如下： Host hk User root Port 22 # not necessary Hostname 119.119.119.119 # remote_ip IdentifyFile ~/.ssh/id_rsa # 密钥 有了上述配置之后，下面两个命令是等效的： ssh -i ~/.ssh/id_rsa root@119.119.119.119 ssh hk 这样我们的第一个命令就可以简化为 ssh -D &lt;port&gt; hk 假设输入的port为8090，那么本地所有通过8090端口输入的数据，都会直接发到远程服务器去，如果是以root身份登陆，服务器会自动转发到相应的地址。（具体的原理我还不清楚，待我了解了回来补充。）这样只要我们装个浏览器插件，把我们要翻wall的请求转发到8090端口即可。 之前大家用的最多的是switchySharp，但是最近出的switchyOmega灰常好用。首先要装一个switchyOmega，此处可能需要翻wall，不翻wall，可以打开chrome的扩展程序页面，然后把下载好的插件拖进去。具体请百度。装好插件，打开配置，新建一个情景模式 代理协议选择socks5，地址是本地地址，端口是刚才的8090.然后浏览器切换到刚才新建的情景模式，此时是全局代理。回到配置，选择自动切换，这里可以自定义要翻wall的网站 这样当然可以，但是不够智能。网上有人维护了一个需要翻wall的列表，我们可以自动过去 地址：https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt 选择立即更新。 浏览网页的时候，选择自动切换，这样以后翻wall就无忧了。","raw":null,"content":null,"categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"http://blog.0x01.site/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"如何在运行中替换导入的函数","slug":"如何在运行中替换导入的函数","date":"2015-09-08T11:39:50.000Z","updated":"2021-04-16T14:48:39.046Z","comments":true,"path":"2015/09/08/如何在运行中替换导入的函数/","link":"","permalink":"http://blog.0x01.site/2015/09/08/%E5%A6%82%E4%BD%95%E5%9C%A8%E8%BF%90%E8%A1%8C%E4%B8%AD%E6%9B%BF%E6%8D%A2%E5%AF%BC%E5%85%A5%E7%9A%84%E5%87%BD%E6%95%B0/","excerpt":"在公司的一个内部分享会上，同事分享了一个很好的可以在函数执行时，替换导入的函数的方法，让我这等土八路实在是羞愧。废话不多说，待我娓娓道来。","text":"在公司的一个内部分享会上，同事分享了一个很好的可以在函数执行时，替换导入的函数的方法，让我这等土八路实在是羞愧。废话不多说，待我娓娓道来。 事件起因我们写了一个短信通道，为了测试该通道的并发能力，需要进行压力测试，但是压力测试的时候肯定不能真的发短信。之前的办法是在代码里进行一些判断，比如：if config[&apos;DEBUG&apos;] = True: dummy_sender(msg) 但是这样很不优雅，而且为了测试脚本，这段代码也要带到生产环境里去，也会影响效率。 Python的特性Python中一切皆对象，函数也不例外。当我们遇到的是下面的这个脚本时：from a import sender def send_sms(msg): sender(msg) Python解释器在调用sender时，会按照sender这个字符串去该脚本中的globals中寻找函数，并且调用。这个脚本中的globals为：&apos;send_sms&apos;: &lt;function send_sms at 0x10a1e7050&gt;, &apos;__builtins__&apos;: &lt;module &apos;__builtin__&apos; (built-in)&gt;, &apos;__file__&apos;: &apos;practise.py&apos;, &apos;sender&apos;: &lt;function sender at 0x10a1e7050&gt;, 那么我们能不能在执行当前脚本的时候，替换掉sender呢。当然可以。send_sms的globals会带有该脚本的所有globals的属性，我们可以从这里下手send_sms.__globals__[&apos;sender&apos;] = dummy_sender 如果打印一下sys.modules, 我们发现，我们函数名称也在里面。于是也可以替换sys.modules[&apos;sender&apos;] = dummy_sender 注意，从a脚本导入后，a脚本导入的函数也会在sys.modules里。我对于其中的原理虽然了解一些，但还是难以说清楚，按照土八路的思想，能用就万岁。原理以后再补。","raw":null,"content":null,"categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://blog.0x01.site/tags/Python/"}]}]}